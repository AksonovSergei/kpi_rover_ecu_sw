
ECU_sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b4  080074b4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004c50  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cb0  20004cb0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019811  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038db  00000000  00000000  000398e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001520  00000000  00000000  0003d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001067  00000000  00000000  0003e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004274  00000000  00000000  0003f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017fd0  00000000  00000000  000439bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5e92  00000000  00000000  0005b98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005bbc  00000000  00000000  00131820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001373dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073b0 	.word	0x080073b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080073b0 	.word	0x080073b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HeartbeatInit>:
void HeartbeatLedOff(void *arg);

static osTimerId_t ledOnTimer = NULL;
static osTimerId_t ledOffTimer = NULL;

int HeartbeatInit(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/*
	 * Creates and starts software timers for LED blinking.
	 * returns 1 in case of error of timer creation or starting
	 *         0 in case of success
	 */
	ledOnTimer = osTimerNew(HeartbeatLedOn, osTimerPeriodic, NULL, NULL);
 80004e0:	2300      	movs	r3, #0
 80004e2:	2200      	movs	r2, #0
 80004e4:	2101      	movs	r1, #1
 80004e6:	4818      	ldr	r0, [pc, #96]	; (8000548 <HeartbeatInit+0x6c>)
 80004e8:	f003 fb28 	bl	8003b3c <osTimerNew>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <HeartbeatInit+0x70>)
 80004f0:	6013      	str	r3, [r2, #0]
	ledOffTimer = osTimerNew(HeartbeatLedOff, osTimerPeriodic, NULL, NULL);
 80004f2:	2300      	movs	r3, #0
 80004f4:	2200      	movs	r2, #0
 80004f6:	2101      	movs	r1, #1
 80004f8:	4815      	ldr	r0, [pc, #84]	; (8000550 <HeartbeatInit+0x74>)
 80004fa:	f003 fb1f 	bl	8003b3c <osTimerNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HeartbeatInit+0x78>)
 8000502:	6013      	str	r3, [r2, #0]

	if (ledOnTimer != NULL && ledOffTimer != NULL){
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HeartbeatInit+0x70>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d01a      	beq.n	8000542 <HeartbeatInit+0x66>
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HeartbeatInit+0x78>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d016      	beq.n	8000542 <HeartbeatInit+0x66>
		if (!osTimerStart( ledOnTimer, MS_TO_TICKS(normal) ) && xTimerPendFunctionCall( (PendedFunction_t) osTimerStart,
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <HeartbeatInit+0x70>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	4618      	mov	r0, r3
 800051e:	f003 fb89 	bl	8003c34 <osTimerStart>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10c      	bne.n	8000542 <HeartbeatInit+0x66>
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HeartbeatInit+0x78>)
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <HeartbeatInit+0x7c>)
 8000534:	f006 f9ea 	bl	800690c <xTimerPendFunctionCall>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HeartbeatInit+0x66>
				(void *) ledOffTimer, MS_TO_TICKS(normal), MS_TO_TICKS(LED_FLASH_DURATION_MS)) != pdFALSE){

				return 0;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <HeartbeatInit+0x68>
			}

	}
	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800055d 	.word	0x0800055d
 800054c:	2000007c 	.word	0x2000007c
 8000550:	0800057d 	.word	0x0800057d
 8000554:	20000080 	.word	0x20000080
 8000558:	08003c35 	.word	0x08003c35

0800055c <HeartbeatLedOn>:
		return 0;
	}
	return 1;
}

void HeartbeatLedOn(void *arg){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HEARTBEAT_LED_Port, HEARTBEAT_LED_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <HeartbeatLedOn+0x1c>)
 800056c:	f001 f9f6 	bl	800195c <HAL_GPIO_WritePin>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40020c00 	.word	0x40020c00

0800057c <HeartbeatLedOff>:

void HeartbeatLedOff(void *arg){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HEARTBEAT_LED_Port, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <HeartbeatLedOff+0x1c>)
 800058c:	f001 f9e6 	bl	800195c <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020c00 	.word	0x40020c00

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fb1a 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f840 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8e6 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f8c4 	bl	8000738 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f898 	bl	80006e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f003 f9b6 	bl	8003924 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartbeatInit();
 80005b8:	f7ff ff90 	bl	80004dc <HeartbeatInit>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logDataBuffer */
  logDataBufferHandle = osMessageQueueNew (16, 128, &logDataBuffer_attributes);
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <main+0x64>)
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	2010      	movs	r0, #16
 80005c2:	f003 fc4f 	bl	8003e64 <osMessageQueueNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <main+0x68>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <main+0x6c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x70>)
 80005d2:	f003 f9f1 	bl	80039b8 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <main+0x74>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of serialLogTask */
  serialLogTaskHandle = osThreadNew(SerialLogTask, NULL, &serialLogTask_attributes);
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <main+0x78>)
 80005de:	2100      	movs	r1, #0
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <main+0x7c>)
 80005e2:	f003 f9e9 	bl	80039b8 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <main+0x80>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of UART3_Events */
  UART3_EventsHandle = osEventFlagsNew(&UART3_Events_attributes);
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x84>)
 80005ee:	f003 fb4f 	bl	8003c90 <osEventFlagsNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <main+0x88>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f003 f9b8 	bl	800396c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x60>
 80005fe:	bf00      	nop
 8000600:	08007464 	.word	0x08007464
 8000604:	20000134 	.word	0x20000134
 8000608:	0800741c 	.word	0x0800741c
 800060c:	08000821 	.word	0x08000821
 8000610:	2000012c 	.word	0x2000012c
 8000614:	08007440 	.word	0x08007440
 8000618:	08000831 	.word	0x08000831
 800061c:	20000130 	.word	0x20000130
 8000620:	0800747c 	.word	0x0800747c
 8000624:	20000138 	.word	0x20000138

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fdd0 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xb4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xb4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <SystemClock_Config+0xb8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <SystemClock_Config+0xb8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f979 	bl	8001990 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 f900 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fbdc 	bl	8001e80 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ce:	f000 f8eb 	bl	80008a8 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART3_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800070a:	2208      	movs	r2, #8
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800071c:	f002 f864 	bl	80027e8 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8bf 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	40004800 	.word	0x40004800

08000738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_DMA_Init+0x3c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <MX_DMA_Init+0x3c>)
 8000748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_DMA_Init+0x3c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2105      	movs	r1, #5
 800075e:	200e      	movs	r0, #14
 8000760:	f000 fb34 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000764:	200e      	movs	r0, #14
 8000766:	f000 fb4d 	bl	8000e04 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_GPIO_Init+0x80>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_GPIO_Init+0x80>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x80>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x80>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <MX_GPIO_Init+0x80>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x80>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0x84>)
 80007ce:	f001 f8c5 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80007d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0x84>)
 80007ec:	f000 ff1a 	bl	8001624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 4 */
osStatus_t serial_log(uint8_t *data){
	return osMessageQueuePut (logDataBufferHandle, (const void *)data, NULL, osWaitForever);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(UART3_EventsHandle, UART3_DMA_TX_complete_event_flag);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_UART_TxCpltCallback+0x1c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fa7e 	bl	8003d10 <osEventFlagsSet>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000138 	.word	0x20000138

08000820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f003 f957 	bl	8003adc <osDelay>
 800082e:	e7fb      	b.n	8000828 <StartDefaultTask+0x8>

08000830 <SerialLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SerialLogTask */
void SerialLogTask(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0a2      	sub	sp, #136	; 0x88
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialLogTask */
  uint8_t data[MAX_LOG_DATA_LENGTH];
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(UART3_EventsHandle, UART3_DMA_TX_complete_event_flag, osFlagsWaitAny, osWaitForever);
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <SerialLogTask+0x48>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	2200      	movs	r2, #0
 8000842:	2101      	movs	r1, #1
 8000844:	f003 faa8 	bl	8003d98 <osEventFlagsWait>
	osMessageQueueGet(logDataBufferHandle, data, NULL, osWaitForever);
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <SerialLogTask+0x4c>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f107 0108 	add.w	r1, r7, #8
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2200      	movs	r2, #0
 8000856:	f003 fb79 	bl	8003f4c <osMessageQueueGet>
	HAL_UART_Transmit_DMA(&huart3, data, strlen((char *)data));
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fcb6 	bl	80001d0 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <SerialLogTask+0x50>)
 8000870:	f002 f80a 	bl	8002888 <HAL_UART_Transmit_DMA>
	osEventFlagsWait(UART3_EventsHandle, UART3_DMA_TX_complete_event_flag, osFlagsWaitAny, osWaitForever);
 8000874:	e7e0      	b.n	8000838 <SerialLogTask+0x8>
 8000876:	bf00      	nop
 8000878:	20000138 	.word	0x20000138
 800087c:	20000134 	.word	0x20000134
 8000880:	20000084 	.word	0x20000084

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f000 f9c1 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40010000 	.word	0x40010000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_MspInit+0x54>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_MspInit+0x54>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 fa67 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a35      	ldr	r2, [pc, #212]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d163      	bne.n	80009f6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a2c      	ldr	r2, [pc, #176]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000966:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000978:	2307      	movs	r3, #7
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <HAL_UART_MspInit+0xfc>)
 8000984:	f000 fe4e 	bl	8001624 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_UART_MspInit+0x100>)
 800098a:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <HAL_UART_MspInit+0x104>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_UART_MspInit+0x100>)
 8000990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000994:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_UART_MspInit+0x100>)
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_UART_MspInit+0x100>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80009ca:	4810      	ldr	r0, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009cc:	f000 fa28 	bl	8000e20 <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80009d6:	f7ff ff67 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_UART_MspInit+0x100>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2027      	movs	r0, #39	; 0x27
 80009ec:	f000 f9ee 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009f0:	2027      	movs	r0, #39	; 0x27
 80009f2:	f000 fa07 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	200000cc 	.word	0x200000cc
 8000a10:	40026058 	.word	0x40026058

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fbf8 	bl	8002240 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a50:	f001 fbe2 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8000a54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	3b01      	subs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_InitTick+0xd8>)
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_InitTick+0xdc>)
 8000a68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_InitTick+0xd8>)
 8000a6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_InitTick+0xd8>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_InitTick+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_InitTick+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_InitTick+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <HAL_InitTick+0xd8>)
 8000a8c:	f001 fc0a 	bl	80022a4 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d11b      	bne.n	8000ad6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a9e:	4813      	ldr	r0, [pc, #76]	; (8000aec <HAL_InitTick+0xd8>)
 8000aa0:	f001 fc5a 	bl	8002358 <HAL_TIM_Base_Start_IT>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d111      	bne.n	8000ad6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 f9a6 	bl	8000e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d808      	bhi.n	8000ad0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 f982 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_InitTick+0xe0>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e002      	b.n	8000ad6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	2000013c 	.word	0x2000013c
 8000af0:	40010000 	.word	0x40010000
 8000af4:	20000004 	.word	0x20000004

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DMA1_Stream3_IRQHandler+0x10>)
 8000b2a:	f000 fb11 	bl	8001150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000cc 	.word	0x200000cc

08000b38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3e:	f001 fc7b 	bl	8002438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000013c 	.word	0x2000013c

08000b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USART3_IRQHandler+0x10>)
 8000b52:	f001 ff09 	bl	8002968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000084 	.word	0x20000084

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b88:	f7ff ffea 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f006 fb71 	bl	8007298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fcf1 	bl	800059c <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bc8:	080074bc 	.word	0x080074bc
  ldr r2, =_sbss
 8000bcc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd0:	20004cb0 	.word	0x20004cb0

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d8 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff ff04 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe52 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000184 	.word	0x20000184

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000184 	.word	0x20000184

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ff0a 	bl	8000c44 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e099      	b.n	8000f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5c:	e00f      	b.n	8000e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e5e:	f7ff fef1 	bl	8000c44 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d908      	bls.n	8000e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e078      	b.n	8000f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e8      	bne.n	8000e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_DMA_Init+0x158>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d107      	bne.n	8000ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f023 0307 	bic.w	r3, r3, #7
 8000efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d117      	bne.n	8000f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00e      	beq.n	8000f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fb01 	bl	800152c <DMA_CheckFifoParam>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e016      	b.n	8000f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fab8 	bl	80014c0 <DMA_CalcBaseAndBitshift>
 8000f50:	4603      	mov	r3, r0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f58:	223f      	movs	r2, #63	; 0x3f
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	f010803f 	.word	0xf010803f

08000f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_DMA_Start_IT+0x26>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e040      	b.n	8001024 <HAL_DMA_Start_IT+0xa8>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d12f      	bne.n	8001016 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 fa4a 	bl	8001464 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	223f      	movs	r2, #63	; 0x3f
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0216 	orr.w	r2, r2, #22
 8000fea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0208 	orr.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e005      	b.n	8001022 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800101e:	2302      	movs	r3, #2
 8001020:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800103a:	f7ff fe03 	bl	8000c44 <HAL_GetTick>
 800103e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d008      	beq.n	800105e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e052      	b.n	8001104 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0216 	bic.w	r2, r2, #22
 800106c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800107c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <HAL_DMA_Abort+0x62>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ae:	e013      	b.n	80010d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b0:	f7ff fdc8 	bl	8000c44 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d90c      	bls.n	80010d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2220      	movs	r2, #32
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e015      	b.n	8001104 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1e4      	bne.n	80010b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	223f      	movs	r2, #63	; 0x3f
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d004      	beq.n	800112a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00c      	b.n	8001144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0201 	bic.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800115c:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <HAL_DMA_IRQHandler+0x248>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a8e      	ldr	r2, [pc, #568]	; (800139c <HAL_DMA_IRQHandler+0x24c>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0a9b      	lsrs	r3, r3, #10
 8001168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117a:	2208      	movs	r2, #8
 800117c:	409a      	lsls	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0204 	bic.w	r2, r2, #4
 80011a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2208      	movs	r2, #8
 80011aa:	409a      	lsls	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	2201      	movs	r2, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d012      	beq.n	80011f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f6:	2204      	movs	r2, #4
 80011f8:	409a      	lsls	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d012      	beq.n	8001228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00b      	beq.n	8001228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2204      	movs	r2, #4
 8001216:	409a      	lsls	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	f043 0204 	orr.w	r2, r3, #4
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2210      	movs	r2, #16
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d043      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03c      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	2210      	movs	r2, #16
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d018      	beq.n	8001292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d024      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	4798      	blx	r3
 800127e:	e01f      	b.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01b      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
 8001290:	e016      	b.n	80012c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0208 	bic.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	2220      	movs	r2, #32
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 808f 	beq.w	80013f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8087 	beq.w	80013f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2220      	movs	r2, #32
 80012e8:	409a      	lsls	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d136      	bne.n	8001368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0216 	bic.w	r2, r2, #22
 8001308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_DMA_IRQHandler+0x1da>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	223f      	movs	r2, #63	; 0x3f
 8001340:	409a      	lsls	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135a:	2b00      	cmp	r3, #0
 800135c:	d07e      	beq.n	800145c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
        }
        return;
 8001366:	e079      	b.n	800145c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01d      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10d      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	2b00      	cmp	r3, #0
 800138a:	d031      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
 8001394:	e02c      	b.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
 8001396:	bf00      	nop
 8001398:	20000000 	.word	0x20000000
 800139c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e01e      	b.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10f      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d032      	beq.n	800145e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d022      	beq.n	800144a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2205      	movs	r2, #5
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	d307      	bcc.n	8001438 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_DMA_IRQHandler+0x2cc>
 8001436:	e000      	b.n	800143a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001438:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
 800145a:	e000      	b.n	800145e <HAL_DMA_IRQHandler+0x30e>
        return;
 800145c:	bf00      	nop
    }
  }
}
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001480:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b40      	cmp	r3, #64	; 0x40
 8001490:	d108      	bne.n	80014a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014a2:	e007      	b.n	80014b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3b10      	subs	r3, #16
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <DMA_CalcBaseAndBitshift+0x64>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <DMA_CalcBaseAndBitshift+0x68>)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d909      	bls.n	8001502 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	1d1a      	adds	r2, r3, #4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001500:	e007      	b.n	8001512 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	aaaaaaab 	.word	0xaaaaaaab
 8001528:	080074a4 	.word	0x080074a4

0800152c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d11f      	bne.n	8001586 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d856      	bhi.n	80015fa <DMA_CheckFifoParam+0xce>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <DMA_CheckFifoParam+0x28>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	08001577 	.word	0x08001577
 800155c:	08001565 	.word	0x08001565
 8001560:	080015fb 	.word	0x080015fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d046      	beq.n	80015fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001574:	e043      	b.n	80015fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800157e:	d140      	bne.n	8001602 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001584:	e03d      	b.n	8001602 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158e:	d121      	bne.n	80015d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d837      	bhi.n	8001606 <DMA_CheckFifoParam+0xda>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DMA_CheckFifoParam+0x70>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015b3 	.word	0x080015b3
 80015a4:	080015ad 	.word	0x080015ad
 80015a8:	080015c5 	.word	0x080015c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
      break;
 80015b0:	e030      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d025      	beq.n	800160a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c2:	e022      	b.n	800160a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015cc:	d11f      	bne.n	800160e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015d2:	e01c      	b.n	800160e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d903      	bls.n	80015e2 <DMA_CheckFifoParam+0xb6>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d003      	beq.n	80015e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015e0:	e018      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
      break;
 80015e6:	e015      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00e      	beq.n	8001612 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e00b      	b.n	8001612 <DMA_CheckFifoParam+0xe6>
      break;
 80015fa:	bf00      	nop
 80015fc:	e00a      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
 8001600:	e008      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
 8001604:	e006      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001606:	bf00      	nop
 8001608:	e004      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 800160a:	bf00      	nop
 800160c:	e002      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;   
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
    }
  } 
  
  return status; 
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e16b      	b.n	8001918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 815a 	bne.w	8001912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80b4 	beq.w	8001912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a5f      	ldr	r2, [pc, #380]	; (8001930 <HAL_GPIO_Init+0x30c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_GPIO_Init+0x30c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <HAL_GPIO_Init+0x310>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_GPIO_Init+0x314>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d02b      	beq.n	800184a <HAL_GPIO_Init+0x226>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_GPIO_Init+0x318>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d025      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a50      	ldr	r2, [pc, #320]	; (8001940 <HAL_GPIO_Init+0x31c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01f      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x320>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x21a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_GPIO_Init+0x324>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x216>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_GPIO_Init+0x328>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x212>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_GPIO_Init+0x32c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x330>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x20a>
 800182a:	2307      	movs	r3, #7
 800182c:	e00e      	b.n	800184c <HAL_GPIO_Init+0x228>
 800182e:	2308      	movs	r3, #8
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001832:	2306      	movs	r3, #6
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x228>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x228>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x228>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x228>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	; (8001934 <HAL_GPIO_Init+0x310>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x334>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x334>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x334>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_GPIO_Init+0x334>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x334>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x334>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x334>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x334>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f ae90 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40021c00 	.word	0x40021c00
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e267      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d075      	beq.n	8001a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b85      	ldr	r3, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d2:	d10b      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x108>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d157      	bne.n	8001a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e242      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d106      	bne.n	8001a04 <HAL_RCC_OscConfig+0x74>
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x98>
 8001a0e:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6f      	ldr	r2, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6c      	ldr	r2, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a28:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a68      	ldr	r2, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f8fc 	bl	8000c44 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f8f8 	bl	8000c44 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e207      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xc0>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f8e8 	bl	8000c44 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f8e4 	bl	8000c44 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1f3      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0xe8>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d063      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1c7      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f89d 	bl	8000c44 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f899 	bl	8000c44 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1a8      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f87c 	bl	8000c44 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f878 	bl	8000c44 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e187      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f85c 	bl	8000c44 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f858 	bl	8000c44 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e167      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x200>
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f845 	bl	8000c44 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f841 	bl	8000c44 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e150      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a7c      	ldr	r2, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b77      	ldr	r3, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a73      	ldr	r2, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f801 	bl	8000c44 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7fe fffd 	bl	8000c44 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e10c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x30c>
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a5e      	ldr	r2, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7fe ffc2 	bl	8000c44 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ffbe 	bl	8000c44 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0cb      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x334>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7fe ffac 	bl	8000c44 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe ffa8 	bl	8000c44 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0b5      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a1 	beq.w	8001e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d05c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d141      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ff7c 	bl	8000c44 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ff78 	bl	8000c44 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e087      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	491b      	ldr	r1, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff51 	bl	8000c44 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff4d 	bl	8000c44 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e05c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x416>
 8001dc4:	e054      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff3a 	bl	8000c44 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff36 	bl	8000c44 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e045      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x444>
 8001df2:	e03d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e038      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4ec>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d028      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d121      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d11a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d90c      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e067      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe68 	bl	8000c44 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe fe64 	bl	8000c44 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fcf4 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	0800748c 	.word	0x0800748c
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002050:	b090      	sub	sp, #64	; 0x40
 8002052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d00d      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x40>
 8002070:	2b08      	cmp	r3, #8
 8002072:	f200 80a1 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3a>
 800207e:	e09b      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002084:	e09b      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800208a:	e098      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002096:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	2200      	movs	r2, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	627a      	str	r2, [r7, #36]	; 0x24
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b4:	2100      	movs	r1, #0
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b8:	fb03 f201 	mul.w	r2, r3, r1
 80020bc:	2300      	movs	r3, #0
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	4a43      	ldr	r2, [pc, #268]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020cc:	460a      	mov	r2, r1
 80020ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	4413      	add	r3, r2
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	2200      	movs	r2, #0
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	61fa      	str	r2, [r7, #28]
 80020de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e6:	f7fe f87b 	bl	80001e0 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4613      	mov	r3, r2
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	e053      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	617a      	str	r2, [r7, #20]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002106:	f04f 0b00 	mov.w	fp, #0
 800210a:	4652      	mov	r2, sl
 800210c:	465b      	mov	r3, fp
 800210e:	f04f 0000 	mov.w	r0, #0
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	0159      	lsls	r1, r3, #5
 8002118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800211c:	0150      	lsls	r0, r2, #5
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	ebb2 080a 	subs.w	r8, r2, sl
 8002126:	eb63 090b 	sbc.w	r9, r3, fp
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800213a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800213e:	ebb2 0408 	subs.w	r4, r2, r8
 8002142:	eb63 0509 	sbc.w	r5, r3, r9
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	00eb      	lsls	r3, r5, #3
 8002150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002154:	00e2      	lsls	r2, r4, #3
 8002156:	4614      	mov	r4, r2
 8002158:	461d      	mov	r5, r3
 800215a:	eb14 030a 	adds.w	r3, r4, sl
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	eb45 030b 	adc.w	r3, r5, fp
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002172:	4629      	mov	r1, r5
 8002174:	028b      	lsls	r3, r1, #10
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800217c:	4621      	mov	r1, r4
 800217e:	028a      	lsls	r2, r1, #10
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	2200      	movs	r2, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002190:	f7fe f826 	bl	80001e0 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3740      	adds	r7, #64	; 0x40
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	017d7840 	.word	0x017d7840

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	0800749c 	.word	0x0800749c

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800221c:	f7ff ffdc 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0b5b      	lsrs	r3, r3, #13
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	0800749c 	.word	0x0800749c

08002240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	220f      	movs	r2, #15
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_GetClockConfig+0x5c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_RCC_GetClockConfig+0x60>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0207 	and.w	r2, r3, #7
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e041      	b.n	800233a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f839 	bl	8002342 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 f9c0 	bl	8002668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04e      	b.n	800240e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <HAL_TIM_Base_Start_IT+0xc4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d01d      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_TIM_Base_Start_IT+0xc8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_TIM_Base_Start_IT+0xcc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_TIM_Base_Start_IT+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_TIM_Base_Start_IT+0xd4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_TIM_Base_Start_IT+0xd8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_Base_Start_IT+0xdc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d010      	beq.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e007      	b.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800
 8002428:	40000c00 	.word	0x40000c00
 800242c:	40010400 	.word	0x40010400
 8002430:	40014000 	.word	0x40014000
 8002434:	40001800 	.word	0x40001800

08002438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d020      	beq.n	800249c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8d2 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8c4 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f8d5 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d020      	beq.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0204 	mvn.w	r2, #4
 80024b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f8ac 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f89e 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8af 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d020      	beq.n	8002534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01b      	beq.n	8002534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0208 	mvn.w	r2, #8
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2204      	movs	r2, #4
 800250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f886 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f878 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f889 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0210 	mvn.w	r2, #16
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2208      	movs	r2, #8
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f860 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f852 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f863 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0201 	mvn.w	r2, #1
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe f970 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f906 	bl	80027d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f834 	bl	8002654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8d8 	bl	80027c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a46      	ldr	r2, [pc, #280]	; (8002794 <TIM_Base_SetConfig+0x12c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d00f      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a43      	ldr	r2, [pc, #268]	; (8002798 <TIM_Base_SetConfig+0x130>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00b      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a42      	ldr	r2, [pc, #264]	; (800279c <TIM_Base_SetConfig+0x134>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a41      	ldr	r2, [pc, #260]	; (80027a0 <TIM_Base_SetConfig+0x138>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <TIM_Base_SetConfig+0x13c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d108      	bne.n	80026ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a35      	ldr	r2, [pc, #212]	; (8002794 <TIM_Base_SetConfig+0x12c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d027      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <TIM_Base_SetConfig+0x130>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d023      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <TIM_Base_SetConfig+0x134>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <TIM_Base_SetConfig+0x138>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <TIM_Base_SetConfig+0x13c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <TIM_Base_SetConfig+0x140>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <TIM_Base_SetConfig+0x144>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <TIM_Base_SetConfig+0x148>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <TIM_Base_SetConfig+0x14c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <TIM_Base_SetConfig+0x150>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a29      	ldr	r2, [pc, #164]	; (80027bc <TIM_Base_SetConfig+0x154>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <TIM_Base_SetConfig+0x12c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0xf8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <TIM_Base_SetConfig+0x13c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
  }
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40000c00 	.word	0x40000c00
 80027a4:	40010400 	.word	0x40010400
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40014400 	.word	0x40014400
 80027b0:	40014800 	.word	0x40014800
 80027b4:	40001800 	.word	0x40001800
 80027b8:	40001c00 	.word	0x40001c00
 80027bc:	40002000 	.word	0x40002000

080027c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e042      	b.n	8002880 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f87c 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800282a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fdc1 	bl	80033b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d156      	bne.n	8002950 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_UART_Transmit_DMA+0x26>
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e04f      	b.n	8002952 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2221      	movs	r2, #33	; 0x21
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_UART_Transmit_DMA+0xd4>)
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <HAL_UART_Transmit_DMA+0xd8>)
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_UART_Transmit_DMA+0xdc>)
 80028e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	2200      	movs	r2, #0
 80028f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3304      	adds	r3, #4
 8002906:	461a      	mov	r2, r3
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	f7fe fb37 	bl	8000f7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	617b      	str	r3, [r7, #20]
   return(result);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002938:	627a      	str	r2, [r7, #36]	; 0x24
 800293a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	61fb      	str	r3, [r7, #28]
   return(result);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	08002ee1 	.word	0x08002ee1
 8002960:	08002f7b 	.word	0x08002f7b
 8002964:	08002f97 	.word	0x08002f97

08002968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ba      	sub	sp, #232	; 0xe8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
 80029ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fc36 	bl	8003238 <UART_Receive_IT>
      return;
 80029cc:	e25b      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80de 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80d1 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
 8002a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f043 0208 	orr.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 81f2 	beq.w	8002e7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fbc1 	bl	8003238 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x17a>
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d04f      	beq.n	8002b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fac9 	bl	800307a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d141      	bne.n	8002b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1d9      	bne.n	8002af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	; (8002d48 <HAL_UART_IRQHandler+0x3e0>)
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fad8 	bl	800110c <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00e      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f99e 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00a      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f99a 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e006      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f996 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002b8e:	e175      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	bf00      	nop
    return;
 8002b92:	e173      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f040 814f 	bne.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8148 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8141 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	f040 80b6 	bne.w	8002d4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8145 	beq.w	8002e80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	f080 813e 	bcs.w	8002e80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	f000 8088 	beq.w	8002d2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1d9      	bne.n	8002c1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e1      	bne.n	8002c66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e3      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e3      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f981 	bl	800102c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8c1 	bl	8002ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d46:	e09b      	b.n	8002e80 <HAL_UART_IRQHandler+0x518>
 8002d48:	08003141 	.word	0x08003141
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 808e 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8089 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d96:	647a      	str	r2, [r7, #68]	; 0x44
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e3      	bne.n	8002d72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dce:	633a      	str	r2, [r7, #48]	; 0x30
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e3      	bne.n	8002daa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0310 	bic.w	r3, r3, #16
 8002e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	69b9      	ldr	r1, [r7, #24]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	617b      	str	r3, [r7, #20]
   return(result);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f847 	bl	8002ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3a:	e023      	b.n	8002e84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f987 	bl	8003168 <UART_Transmit_IT>
    return;
 8002e5a:	e014      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f9c7 	bl	8003208 <UART_EndTransmit_IT>
    return;
 8002e7a:	e004      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e84:	bf00      	nop
  }
}
 8002e86:	37e8      	adds	r7, #232	; 0xe8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b090      	sub	sp, #64	; 0x40
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d137      	bne.n	8002f6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	2200      	movs	r2, #0
 8002f00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	623b      	str	r3, [r7, #32]
   return(result);
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f22:	633a      	str	r2, [r7, #48]	; 0x30
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e5      	bne.n	8002f02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f56:	61fa      	str	r2, [r7, #28]
 8002f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	617b      	str	r3, [r7, #20]
   return(result);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f6a:	e002      	b.n	8002f72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f6e:	f7fd fc47 	bl	8000800 <HAL_UART_TxCpltCallback>
}
 8002f72:	bf00      	nop
 8002f74:	3740      	adds	r7, #64	; 0x40
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff7f 	bl	8002e8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b21      	cmp	r3, #33	; 0x21
 8002fc8:	d108      	bne.n	8002fdc <UART_DMAError+0x46>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002fd6:	68b8      	ldr	r0, [r7, #8]
 8002fd8:	f000 f827 	bl	800302a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b22      	cmp	r3, #34	; 0x22
 8002ffc:	d108      	bne.n	8003010 <UART_DMAError+0x7a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f000 f835 	bl	800307a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800301c:	68b8      	ldr	r0, [r7, #8]
 800301e:	f7ff ff49 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800302a:	b480      	push	{r7}
 800302c:	b089      	sub	sp, #36	; 0x24
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	60bb      	str	r3, [r7, #8]
   return(result);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	61ba      	str	r2, [r7, #24]
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6979      	ldr	r1, [r7, #20]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	613b      	str	r3, [r7, #16]
   return(result);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e5      	bne.n	8003032 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307a:	b480      	push	{r7}
 800307c:	b095      	sub	sp, #84	; 0x54
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a2:	643a      	str	r2, [r7, #64]	; 0x40
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d119      	bne.n	8003126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	60bb      	str	r3, [r7, #8]
   return(result);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f023 0310 	bic.w	r3, r3, #16
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003112:	61ba      	str	r2, [r7, #24]
 8003114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	613b      	str	r3, [r7, #16]
   return(result);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003134:	bf00      	nop
 8003136:	3754      	adds	r7, #84	; 0x54
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff feaa 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b21      	cmp	r3, #33	; 0x21
 800317a:	d13e      	bne.n	80031fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d114      	bne.n	80031b0 <UART_Transmit_IT+0x48>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d110      	bne.n	80031b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]
 80031ae:	e008      	b.n	80031c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	1c59      	adds	r1, r3, #1
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6211      	str	r1, [r2, #32]
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4619      	mov	r1, r3
 80031d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd fae9 	bl	8000800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b22      	cmp	r3, #34	; 0x22
 800324a:	f040 80ae 	bne.w	80033aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d117      	bne.n	8003288 <UART_Receive_IT+0x50>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d113      	bne.n	8003288 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	b29a      	uxth	r2, r3
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
 8003286:	e026      	b.n	80032d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d007      	beq.n	80032ac <UART_Receive_IT+0x74>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <UART_Receive_IT+0x82>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e008      	b.n	80032cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4619      	mov	r1, r3
 80032e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d15d      	bne.n	80033a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0220 	bic.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	2b01      	cmp	r3, #1
 800332e:	d135      	bne.n	800339c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	613b      	str	r3, [r7, #16]
   return(result);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f023 0310 	bic.w	r3, r3, #16
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	623a      	str	r2, [r7, #32]
 8003358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	69f9      	ldr	r1, [r7, #28]
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	61bb      	str	r3, [r7, #24]
   return(result);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e5      	bne.n	8003336 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d10a      	bne.n	800338e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fd97 	bl	8002ec8 <HAL_UARTEx_RxEventCallback>
 800339a:	e002      	b.n	80033a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fd7f 	bl	8002ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e002      	b.n	80033ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3730      	adds	r7, #48	; 0x30
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b8:	b0c0      	sub	sp, #256	; 0x100
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	ea40 0301 	orr.w	r3, r0, r1
 80033dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800340c:	f021 010c 	bic.w	r1, r1, #12
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800341a:	430b      	orrs	r3, r1
 800341c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	6999      	ldr	r1, [r3, #24]
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	ea40 0301 	orr.w	r3, r0, r1
 800343a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b8f      	ldr	r3, [pc, #572]	; (8003680 <UART_SetConfig+0x2cc>)
 8003444:	429a      	cmp	r2, r3
 8003446:	d005      	beq.n	8003454 <UART_SetConfig+0xa0>
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b8d      	ldr	r3, [pc, #564]	; (8003684 <UART_SetConfig+0x2d0>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d104      	bne.n	800345e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7fe fee0 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003458:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800345c:	e003      	b.n	8003466 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800345e:	f7fe fec7 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003462:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003470:	f040 810c 	bne.w	800368c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800347e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003482:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	1891      	adds	r1, r2, r2
 800348c:	65b9      	str	r1, [r7, #88]	; 0x58
 800348e:	415b      	adcs	r3, r3
 8003490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003496:	4621      	mov	r1, r4
 8003498:	eb12 0801 	adds.w	r8, r2, r1
 800349c:	4629      	mov	r1, r5
 800349e:	eb43 0901 	adc.w	r9, r3, r1
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b6:	4690      	mov	r8, r2
 80034b8:	4699      	mov	r9, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	eb18 0303 	adds.w	r3, r8, r3
 80034c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034c4:	462b      	mov	r3, r5
 80034c6:	eb49 0303 	adc.w	r3, r9, r3
 80034ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034e2:	460b      	mov	r3, r1
 80034e4:	18db      	adds	r3, r3, r3
 80034e6:	653b      	str	r3, [r7, #80]	; 0x50
 80034e8:	4613      	mov	r3, r2
 80034ea:	eb42 0303 	adc.w	r3, r2, r3
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
 80034f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034f8:	f7fc fe72 	bl	80001e0 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <UART_SetConfig+0x2d4>)
 8003502:	fba3 2302 	umull	r2, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	011c      	lsls	r4, r3, #4
 800350a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003514:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003518:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800351c:	4642      	mov	r2, r8
 800351e:	464b      	mov	r3, r9
 8003520:	1891      	adds	r1, r2, r2
 8003522:	64b9      	str	r1, [r7, #72]	; 0x48
 8003524:	415b      	adcs	r3, r3
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003528:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800352c:	4641      	mov	r1, r8
 800352e:	eb12 0a01 	adds.w	sl, r2, r1
 8003532:	4649      	mov	r1, r9
 8003534:	eb43 0b01 	adc.w	fp, r3, r1
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003544:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800354c:	4692      	mov	sl, r2
 800354e:	469b      	mov	fp, r3
 8003550:	4643      	mov	r3, r8
 8003552:	eb1a 0303 	adds.w	r3, sl, r3
 8003556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800355a:	464b      	mov	r3, r9
 800355c:	eb4b 0303 	adc.w	r3, fp, r3
 8003560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003570:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003574:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003578:	460b      	mov	r3, r1
 800357a:	18db      	adds	r3, r3, r3
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
 800357e:	4613      	mov	r3, r2
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
 8003586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800358a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800358e:	f7fc fe27 	bl	80001e0 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4611      	mov	r1, r2
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <UART_SetConfig+0x2d4>)
 800359a:	fba3 2301 	umull	r2, r3, r3, r1
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2264      	movs	r2, #100	; 0x64
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	1acb      	subs	r3, r1, r3
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035ae:	4b36      	ldr	r3, [pc, #216]	; (8003688 <UART_SetConfig+0x2d4>)
 80035b0:	fba3 2302 	umull	r2, r3, r3, r2
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035bc:	441c      	add	r4, r3
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035d8:	415b      	adcs	r3, r3
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035e0:	4641      	mov	r1, r8
 80035e2:	1851      	adds	r1, r2, r1
 80035e4:	6339      	str	r1, [r7, #48]	; 0x30
 80035e6:	4649      	mov	r1, r9
 80035e8:	414b      	adcs	r3, r1
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035f8:	4659      	mov	r1, fp
 80035fa:	00cb      	lsls	r3, r1, #3
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003602:	4651      	mov	r1, sl
 8003604:	00ca      	lsls	r2, r1, #3
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	4603      	mov	r3, r0
 800360c:	4642      	mov	r2, r8
 800360e:	189b      	adds	r3, r3, r2
 8003610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003614:	464b      	mov	r3, r9
 8003616:	460a      	mov	r2, r1
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800362c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003634:	460b      	mov	r3, r1
 8003636:	18db      	adds	r3, r3, r3
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	4613      	mov	r3, r2
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003646:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800364a:	f7fc fdc9 	bl	80001e0 <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <UART_SetConfig+0x2d4>)
 8003654:	fba3 1302 	umull	r1, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	2164      	movs	r1, #100	; 0x64
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3332      	adds	r3, #50	; 0x32
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <UART_SetConfig+0x2d4>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	f003 0207 	and.w	r2, r3, #7
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4422      	add	r2, r4
 800367a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800367c:	e106      	b.n	800388c <UART_SetConfig+0x4d8>
 800367e:	bf00      	nop
 8003680:	40011000 	.word	0x40011000
 8003684:	40011400 	.word	0x40011400
 8003688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003690:	2200      	movs	r2, #0
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003696:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800369a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800369e:	4642      	mov	r2, r8
 80036a0:	464b      	mov	r3, r9
 80036a2:	1891      	adds	r1, r2, r2
 80036a4:	6239      	str	r1, [r7, #32]
 80036a6:	415b      	adcs	r3, r3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ae:	4641      	mov	r1, r8
 80036b0:	1854      	adds	r4, r2, r1
 80036b2:	4649      	mov	r1, r9
 80036b4:	eb43 0501 	adc.w	r5, r3, r1
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	00eb      	lsls	r3, r5, #3
 80036c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c6:	00e2      	lsls	r2, r4, #3
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	4643      	mov	r3, r8
 80036ce:	18e3      	adds	r3, r4, r3
 80036d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d4:	464b      	mov	r3, r9
 80036d6:	eb45 0303 	adc.w	r3, r5, r3
 80036da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036fa:	4629      	mov	r1, r5
 80036fc:	008b      	lsls	r3, r1, #2
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003704:	4621      	mov	r1, r4
 8003706:	008a      	lsls	r2, r1, #2
 8003708:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800370c:	f7fc fd68 	bl	80001e0 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4b60      	ldr	r3, [pc, #384]	; (8003898 <UART_SetConfig+0x4e4>)
 8003716:	fba3 2302 	umull	r2, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	011c      	lsls	r4, r3, #4
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003728:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800372c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	1891      	adds	r1, r2, r2
 8003736:	61b9      	str	r1, [r7, #24]
 8003738:	415b      	adcs	r3, r3
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003740:	4641      	mov	r1, r8
 8003742:	1851      	adds	r1, r2, r1
 8003744:	6139      	str	r1, [r7, #16]
 8003746:	4649      	mov	r1, r9
 8003748:	414b      	adcs	r3, r1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003758:	4659      	mov	r1, fp
 800375a:	00cb      	lsls	r3, r1, #3
 800375c:	4651      	mov	r1, sl
 800375e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003762:	4651      	mov	r1, sl
 8003764:	00ca      	lsls	r2, r1, #3
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	4603      	mov	r3, r0
 800376c:	4642      	mov	r2, r8
 800376e:	189b      	adds	r3, r3, r2
 8003770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003774:	464b      	mov	r3, r9
 8003776:	460a      	mov	r2, r1
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	67bb      	str	r3, [r7, #120]	; 0x78
 800378a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003798:	4649      	mov	r1, r9
 800379a:	008b      	lsls	r3, r1, #2
 800379c:	4641      	mov	r1, r8
 800379e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a2:	4641      	mov	r1, r8
 80037a4:	008a      	lsls	r2, r1, #2
 80037a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037aa:	f7fc fd19 	bl	80001e0 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <UART_SetConfig+0x4e4>)
 80037b6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2264      	movs	r2, #100	; 0x64
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	1acb      	subs	r3, r1, r3
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	3332      	adds	r3, #50	; 0x32
 80037c8:	4a33      	ldr	r2, [pc, #204]	; (8003898 <UART_SetConfig+0x4e4>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d4:	441c      	add	r4, r3
 80037d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037da:	2200      	movs	r2, #0
 80037dc:	673b      	str	r3, [r7, #112]	; 0x70
 80037de:	677a      	str	r2, [r7, #116]	; 0x74
 80037e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	415b      	adcs	r3, r3
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f4:	4641      	mov	r1, r8
 80037f6:	1851      	adds	r1, r2, r1
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	4649      	mov	r1, r9
 80037fc:	414b      	adcs	r3, r1
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800380c:	4659      	mov	r1, fp
 800380e:	00cb      	lsls	r3, r1, #3
 8003810:	4651      	mov	r1, sl
 8003812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003816:	4651      	mov	r1, sl
 8003818:	00ca      	lsls	r2, r1, #3
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	4603      	mov	r3, r0
 8003820:	4642      	mov	r2, r8
 8003822:	189b      	adds	r3, r3, r2
 8003824:	66bb      	str	r3, [r7, #104]	; 0x68
 8003826:	464b      	mov	r3, r9
 8003828:	460a      	mov	r2, r1
 800382a:	eb42 0303 	adc.w	r3, r2, r3
 800382e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	663b      	str	r3, [r7, #96]	; 0x60
 800383a:	667a      	str	r2, [r7, #100]	; 0x64
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003848:	4649      	mov	r1, r9
 800384a:	008b      	lsls	r3, r1, #2
 800384c:	4641      	mov	r1, r8
 800384e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003852:	4641      	mov	r1, r8
 8003854:	008a      	lsls	r2, r1, #2
 8003856:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800385a:	f7fc fcc1 	bl	80001e0 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <UART_SetConfig+0x4e4>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2164      	movs	r1, #100	; 0x64
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <UART_SetConfig+0x4e4>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 020f 	and.w	r2, r3, #15
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4422      	add	r2, r4
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <__NVIC_SetPriority>:
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db0a      	blt.n	80038c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <__NVIC_SetPriority+0x4c>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	0112      	lsls	r2, r2, #4
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	440b      	add	r3, r1
 80038c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038c4:	e00a      	b.n	80038dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4908      	ldr	r1, [pc, #32]	; (80038ec <__NVIC_SetPriority+0x50>)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3b04      	subs	r3, #4
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	440b      	add	r3, r1
 80038da:	761a      	strb	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000e100 	.word	0xe000e100
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <SysTick_Handler+0x1c>)
 80038f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038f8:	f002 fae8 	bl	8005ecc <xTaskGetSchedulerState>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d001      	beq.n	8003906 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003902:	f003 f9f1 	bl	8006ce8 <xPortSysTickHandler>
  }
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003914:	2100      	movs	r1, #0
 8003916:	f06f 0004 	mvn.w	r0, #4
 800391a:	f7ff ffbf 	bl	800389c <__NVIC_SetPriority>
#endif
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800392a:	f3ef 8305 	mrs	r3, IPSR
 800392e:	603b      	str	r3, [r7, #0]
  return(result);
 8003930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003936:	f06f 0305 	mvn.w	r3, #5
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	e00c      	b.n	8003958 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <osKernelInitialize+0x44>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d105      	bne.n	8003952 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <osKernelInitialize+0x44>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800394c:	2300      	movs	r3, #0
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	e002      	b.n	8003958 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003958:	687b      	ldr	r3, [r7, #4]
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000188 	.word	0x20000188

0800396c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003972:	f3ef 8305 	mrs	r3, IPSR
 8003976:	603b      	str	r3, [r7, #0]
  return(result);
 8003978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <osKernelStart+0x1a>
    stat = osErrorISR;
 800397e:	f06f 0305 	mvn.w	r3, #5
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	e010      	b.n	80039a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <osKernelStart+0x48>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d109      	bne.n	80039a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800398e:	f7ff ffbf 	bl	8003910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <osKernelStart+0x48>)
 8003994:	2202      	movs	r2, #2
 8003996:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003998:	f001 fd9e 	bl	80054d8 <vTaskStartScheduler>
      stat = osOK;
 800399c:	2300      	movs	r3, #0
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	e002      	b.n	80039a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000188 	.word	0x20000188

080039b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	; 0x38
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c8:	f3ef 8305 	mrs	r3, IPSR
 80039cc:	617b      	str	r3, [r7, #20]
  return(result);
 80039ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d17e      	bne.n	8003ad2 <osThreadNew+0x11a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d07b      	beq.n	8003ad2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039de:	2318      	movs	r3, #24
 80039e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d045      	beq.n	8003a7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <osThreadNew+0x48>
        name = attr->name;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <osThreadNew+0x6e>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b38      	cmp	r3, #56	; 0x38
 8003a18:	d805      	bhi.n	8003a26 <osThreadNew+0x6e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <osThreadNew+0x72>
        return (NULL);
 8003a26:	2300      	movs	r3, #0
 8003a28:	e054      	b.n	8003ad4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <osThreadNew+0xa8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2ba7      	cmp	r3, #167	; 0xa7
 8003a48:	d90a      	bls.n	8003a60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <osThreadNew+0xa8>
        mem = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e010      	b.n	8003a82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <osThreadNew+0xca>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d108      	bne.n	8003a82 <osThreadNew+0xca>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <osThreadNew+0xca>
          mem = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e001      	b.n	8003a82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d110      	bne.n	8003aaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a90:	9202      	str	r2, [sp, #8]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f001 fb2e 	bl	8005100 <xTaskCreateStatic>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e013      	b.n	8003ad2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d110      	bne.n	8003ad2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f001 fb79 	bl	80051ba <xTaskCreate>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <osThreadNew+0x11a>
            hTask = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ad2:	693b      	ldr	r3, [r7, #16]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <osDelay+0x1c>
    stat = osErrorISR;
 8003af0:	f06f 0305 	mvn.w	r3, #5
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e007      	b.n	8003b08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fcb4 	bl	8005470 <vTaskDelay>
    }
  }

  return (stat);
 8003b08:	68fb      	ldr	r3, [r7, #12]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f002 feb6 	bl	800688c <pvTimerGetTimerID>
 8003b20:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6852      	ldr	r2, [r2, #4]
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
  }
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b50:	f3ef 8305 	mrs	r3, IPSR
 8003b54:	613b      	str	r3, [r7, #16]
  return(result);
 8003b56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d163      	bne.n	8003c24 <osTimerNew+0xe8>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d060      	beq.n	8003c24 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003b62:	2008      	movs	r0, #8
 8003b64:	f003 f950 	bl	8006e08 <pvPortMalloc>
 8003b68:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d059      	beq.n	8003c24 <osTimerNew+0xe8>
      callb->func = func;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <osTimerNew+0x4c>
        reload = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e001      	b.n	8003b8c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01c      	beq.n	8003bd6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <osTimerNew+0x6e>
          name = attr->name;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <osTimerNew+0x84>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b2b      	cmp	r3, #43	; 0x2b
 8003bb8:	d902      	bls.n	8003bc0 <osTimerNew+0x84>
          mem = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e00c      	b.n	8003bda <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <osTimerNew+0x9e>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <osTimerNew+0x9e>
            mem = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e001      	b.n	8003bda <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10c      	bne.n	8003bfa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <osTimerNew+0xf4>)
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf2:	f002 facc 	bl	800618e <xTimerCreateStatic>
 8003bf6:	6238      	str	r0, [r7, #32]
 8003bf8:	e00b      	b.n	8003c12 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <osTimerNew+0xf4>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0c:	f002 fa9e 	bl	800614c <xTimerCreate>
 8003c10:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <osTimerNew+0xe8>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <osTimerNew+0xe8>
        vPortFree (callb);
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f003 f9be 	bl	8006fa0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3728      	adds	r7, #40	; 0x28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08003b13 	.word	0x08003b13

08003c34 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c42:	f3ef 8305 	mrs	r3, IPSR
 8003c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c48:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <osTimerStart+0x22>
    stat = osErrorISR;
 8003c4e:	f06f 0305 	mvn.w	r3, #5
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e017      	b.n	8003c86 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <osTimerStart+0x30>
    stat = osErrorParameter;
 8003c5c:	f06f 0303 	mvn.w	r3, #3
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e010      	b.n	8003c86 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003c64:	2300      	movs	r3, #0
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	6938      	ldr	r0, [r7, #16]
 8003c70:	f002 fb06 	bl	8006280 <xTimerGenericCommand>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <osTimerStart+0x4c>
      stat = osOK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e002      	b.n	8003c86 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003c80:	f06f 0302 	mvn.w	r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003c86:	697b      	ldr	r3, [r7, #20]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9c:	f3ef 8305 	mrs	r3, IPSR
 8003ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d12d      	bne.n	8003d04 <osEventFlagsNew+0x74>
    mem = -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <osEventFlagsNew+0x3a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b1f      	cmp	r3, #31
 8003cc2:	d902      	bls.n	8003cca <osEventFlagsNew+0x3a>
        mem = 1;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e00c      	b.n	8003ce4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <osEventFlagsNew+0x54>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <osEventFlagsNew+0x54>
          mem = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d106      	bne.n	8003cf8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f9be 	bl	8004070 <xEventGroupCreateStatic>
 8003cf4:	6178      	str	r0, [r7, #20]
 8003cf6:	e005      	b.n	8003d04 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003cfe:	f000 f9ee 	bl	80040de <xEventGroupCreate>
 8003d02:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <osEventFlagsSet+0x1e>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8003d2e:	f06f 0303 	mvn.w	r3, #3
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e028      	b.n	8003d88 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d36:	f3ef 8305 	mrs	r3, IPSR
 8003d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01d      	beq.n	8003d7e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	6938      	ldr	r0, [r7, #16]
 8003d50:	f000 fb68 	bl	8004424 <xEventGroupSetBitsFromISR>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8003d5a:	f06f 0302 	mvn.w	r3, #2
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e012      	b.n	8003d88 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <osEventFlagsSet+0x78>
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <osEventFlagsSet+0x84>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	e004      	b.n	8003d88 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	6938      	ldr	r0, [r7, #16]
 8003d82:	f000 fa95 	bl	80042b0 <xEventGroupSetBits>
 8003d86:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003d88:	697b      	ldr	r3, [r7, #20]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <osEventFlagsWait+0x22>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003dba:	f06f 0303 	mvn.w	r3, #3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e04b      	b.n	8003e5a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc2:	f3ef 8305 	mrs	r3, IPSR
 8003dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8003dc8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8003dce:	f06f 0305 	mvn.w	r3, #5
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e041      	b.n	8003e5a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	e001      	b.n	8003dea <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	e001      	b.n	8003dfe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	69b8      	ldr	r0, [r7, #24]
 8003e0a:	f000 f983 	bl	8004114 <xEventGroupWaitBits>
 8003e0e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d019      	beq.n	8003e5a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8003e2c:	f06f 0301 	mvn.w	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e012      	b.n	8003e5a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003e34:	f06f 0302 	mvn.w	r3, #2
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e00e      	b.n	8003e5a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8003e4c:	f06f 0301 	mvn.w	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e002      	b.n	8003e5a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003e54:	f06f 0302 	mvn.w	r3, #2
 8003e58:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	; 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e74:	f3ef 8305 	mrs	r3, IPSR
 8003e78:	613b      	str	r3, [r7, #16]
  return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d15f      	bne.n	8003f40 <osMessageQueueNew+0xdc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d05c      	beq.n	8003f40 <osMessageQueueNew+0xdc>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d059      	beq.n	8003f40 <osMessageQueueNew+0xdc>
    mem = -1;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d029      	beq.n	8003eec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <osMessageQueueNew+0x62>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b4f      	cmp	r3, #79	; 0x4f
 8003ea6:	d90e      	bls.n	8003ec6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d302      	bcc.n	8003ec6 <osMessageQueueNew+0x62>
        mem = 1;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e014      	b.n	8003ef0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d110      	bne.n	8003ef0 <osMessageQueueNew+0x8c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10c      	bne.n	8003ef0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <osMessageQueueNew+0x8c>
          mem = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e001      	b.n	8003ef0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10b      	bne.n	8003f0e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2100      	movs	r1, #0
 8003f00:	9100      	str	r1, [sp, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fbbd 	bl	8004684 <xQueueGenericCreateStatic>
 8003f0a:	61f8      	str	r0, [r7, #28]
 8003f0c:	e008      	b.n	8003f20 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003f14:	2200      	movs	r2, #0
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fc2b 	bl	8004774 <xQueueGenericCreate>
 8003f1e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e001      	b.n	8003f38 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f001 f882 	bl	8005044 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f40:	69fb      	ldr	r3, [r7, #28]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	617b      	str	r3, [r7, #20]
  return(result);
 8003f68:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d028      	beq.n	8003fc0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <osMessageQueueGet+0x34>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <osMessageQueueGet+0x34>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003f80:	f06f 0303 	mvn.w	r3, #3
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e037      	b.n	8003ff8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	69b8      	ldr	r0, [r7, #24]
 8003f96:	f000 fec5 	bl	8004d24 <xQueueReceiveFromISR>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d003      	beq.n	8003fa8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003fa0:	f06f 0302 	mvn.w	r3, #2
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e027      	b.n	8003ff8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d024      	beq.n	8003ff8 <osMessageQueueGet+0xac>
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <osMessageQueueGet+0xb8>)
 8003fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	e01b      	b.n	8003ff8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <osMessageQueueGet+0x80>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003fcc:	f06f 0303 	mvn.w	r3, #3
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e011      	b.n	8003ff8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	69b8      	ldr	r0, [r7, #24]
 8003fda:	f000 fdc3 	bl	8004b64 <xQueueReceive>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d009      	beq.n	8003ff8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003fea:	f06f 0301 	mvn.w	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e002      	b.n	8003ff8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003ff2:	f06f 0302 	mvn.w	r3, #2
 8003ff6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a07      	ldr	r2, [pc, #28]	; (8004034 <vApplicationGetIdleTaskMemory+0x2c>)
 8004018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <vApplicationGetIdleTaskMemory+0x30>)
 800401e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000018c 	.word	0x2000018c
 8004038:	20000234 	.word	0x20000234

0800403c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <vApplicationGetTimerTaskMemory+0x2c>)
 800404c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a06      	ldr	r2, [pc, #24]	; (800406c <vApplicationGetTimerTaskMemory+0x30>)
 8004052:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800405a:	601a      	str	r2, [r3, #0]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	20000434 	.word	0x20000434
 800406c:	200004dc 	.word	0x200004dc

08004070 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004094:	2320      	movs	r3, #32
 8004096:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b20      	cmp	r3, #32
 800409c:	d00a      	beq.n	80040b4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	60fb      	str	r3, [r7, #12]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f9bf 	bl	800444c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80040d4:	697b      	ldr	r3, [r7, #20]
	}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80040e4:	2020      	movs	r0, #32
 80040e6:	f002 fe8f 	bl	8006e08 <pvPortMalloc>
 80040ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9a5 	bl	800444c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004108:	687b      	ldr	r3, [r7, #4]
	}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b090      	sub	sp, #64	; 0x40
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xEventGroupWaitBits+0x36>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	623b      	str	r3, [r7, #32]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <xEventGroupWaitBits+0x56>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	61fb      	str	r3, [r7, #28]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61bb      	str	r3, [r7, #24]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004186:	f001 fea1 	bl	8005ecc <xTaskGetSchedulerState>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xEventGroupWaitBits+0x82>
 8004190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <xEventGroupWaitBits+0x86>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xEventGroupWaitBits+0x88>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	617b      	str	r3, [r7, #20]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80041b6:	f001 f9ff 	bl	80055b8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041c6:	f000 f90b 	bl	80043e0 <prvTestWaitCondition>
 80041ca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00e      	beq.n	80041f0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d028      	beq.n	8004232 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	401a      	ands	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e020      	b.n	8004232 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	e018      	b.n	8004232 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	4313      	orrs	r3, r2
 8004226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004228:	4619      	mov	r1, r3
 800422a:	f001 fbc3 	bl	80059b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004232:	f001 f9cf 	bl	80055d4 <xTaskResumeAll>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d031      	beq.n	80042a2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <xEventGroupWaitBits+0x198>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004254:	f001 fec6 	bl	8005fe4 <uxTaskResetEventItemValue>
 8004258:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11a      	bne.n	800429a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004264:	f002 fcae 	bl	8006bc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004274:	f000 f8b4 	bl	80043e0 <prvTestWaitCondition>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	43db      	mvns	r3, r3
 800428c:	401a      	ands	r2, r3
 800428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004290:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004296:	f002 fcc5 	bl	8006c24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80042a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3740      	adds	r7, #64	; 0x40
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80042ba:	2300      	movs	r3, #0
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xEventGroupSetBits+0x32>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <xEventGroupSetBits+0x52>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	60fb      	str	r3, [r7, #12]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	3304      	adds	r3, #4
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	3308      	adds	r3, #8
 800430c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800430e:	f001 f953 	bl	80055b8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	431a      	orrs	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004324:	e03c      	b.n	80043a0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004332:	2300      	movs	r3, #0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800433c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004344:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004360:	e008      	b.n	8004374 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d101      	bne.n	8004374 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004394:	4619      	mov	r1, r3
 8004396:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004398:	f001 fbd8 	bl	8005b4c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80043a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1be      	bne.n	8004326 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80043b6:	f001 f90d 	bl	80055d4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	681b      	ldr	r3, [r3, #0]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3738      	adds	r7, #56	; 0x38
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80043d0:	6839      	ldr	r1, [r7, #0]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff6c 	bl	80042b0 <xEventGroupSetBits>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e007      	b.n	8004416 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d101      	bne.n	8004416 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004416:	697b      	ldr	r3, [r7, #20]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	4804      	ldr	r0, [pc, #16]	; (8004448 <xEventGroupSetBitsFromISR+0x24>)
 8004438:	f002 fa48 	bl	80068cc <xTimerPendFunctionCallFromISR>
 800443c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800443e:	697b      	ldr	r3, [r7, #20]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	080043c7 	.word	0x080043c7

0800444c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f103 0208 	add.w	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f103 0208 	add.w	r2, r3, #8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f103 0208 	add.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d103      	bne.n	800450e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e00c      	b.n	8004528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3308      	adds	r3, #8
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e002      	b.n	800451c <vListInsert+0x2e>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d2f6      	bcs.n	8004516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6892      	ldr	r2, [r2, #8]
 8004576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6852      	ldr	r2, [r2, #4]
 8004580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d103      	bne.n	8004594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <xQueueGenericReset+0x2a>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60bb      	str	r3, [r7, #8]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045de:	f002 faf1 	bl	8006bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	441a      	add	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	3b01      	subs	r3, #1
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d114      	bne.n	800465e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01a      	beq.n	8004672 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3310      	adds	r3, #16
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fa1f 	bl	8005a84 <xTaskRemoveFromEventList>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <xQueueGenericReset+0xcc>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	e009      	b.n	8004672 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3310      	adds	r3, #16
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fef2 	bl	800444c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3324      	adds	r3, #36	; 0x24
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff feed 	bl	800444c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004672:	f002 fad7 	bl	8006c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	; 0x38
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <xQueueGenericCreateStatic+0x52>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <xQueueGenericCreateStatic+0x56>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericCreateStatic+0x58>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	623b      	str	r3, [r7, #32]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <xQueueGenericCreateStatic+0x7e>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <xQueueGenericCreateStatic+0x82>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <xQueueGenericCreateStatic+0x84>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	61fb      	str	r3, [r7, #28]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004722:	2350      	movs	r3, #80	; 0x50
 8004724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b50      	cmp	r3, #80	; 0x50
 800472a:	d00a      	beq.n	8004742 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004742:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004756:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f83f 	bl	80047e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800476c:	4618      	mov	r0, r3
 800476e:	3730      	adds	r7, #48	; 0x30
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	613b      	str	r3, [r7, #16]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3350      	adds	r3, #80	; 0x50
 80047ac:	4618      	mov	r0, r3
 80047ae:	f002 fb2b 	bl	8006e08 <pvPortMalloc>
 80047b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d011      	beq.n	80047de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3350      	adds	r3, #80	; 0x50
 80047c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047cc:	79fa      	ldrb	r2, [r7, #7]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f805 	bl	80047e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047de:	69bb      	ldr	r3, [r7, #24]
	}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e002      	b.n	800480a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004816:	2101      	movs	r1, #1
 8004818:	69b8      	ldr	r0, [r7, #24]
 800481a:	f7ff fecb 	bl	80045b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueGenericSend+0x32>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGenericSend+0x40>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGenericSend+0x44>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGenericSend+0x46>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xQueueGenericSend+0x60>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d103      	bne.n	800489e <xQueueGenericSend+0x6e>
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSend+0x72>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSend+0x74>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericSend+0x8e>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	623b      	str	r3, [r7, #32]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048be:	f001 fb05 	bl	8005ecc <xTaskGetSchedulerState>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <xQueueGenericSend+0x9e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSend+0xa2>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSend+0xa4>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueGenericSend+0xbe>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61fb      	str	r3, [r7, #28]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ee:	f002 f969 	bl	8006bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <xQueueGenericSend+0xd4>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d129      	bne.n	8004958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490a:	f000 fa8b 	bl	8004e24 <prvCopyDataToQueue>
 800490e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	4618      	mov	r0, r3
 800491e:	f001 f8b1 	bl	8005a84 <xTaskRemoveFromEventList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004928:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <xQueueGenericSend+0x1f8>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	e00a      	b.n	8004950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <xQueueGenericSend+0x1f8>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004950:	f002 f968 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	e063      	b.n	8004a20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800495e:	f002 f961 	bl	8006c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004962:	2300      	movs	r3, #0
 8004964:	e05c      	b.n	8004a20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f94d 	bl	8005c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004976:	2301      	movs	r3, #1
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800497a:	f002 f953 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497e:	f000 fe1b 	bl	80055b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004982:	f002 f91f 	bl	8006bc4 <vPortEnterCritical>
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <xQueueGenericSend+0x16c>
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a2:	b25b      	sxtb	r3, r3
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x182>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b2:	f002 f937 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b6:	1d3a      	adds	r2, r7, #4
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f93c 	bl	8005c3c <xTaskCheckForTimeOut>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d124      	bne.n	8004a14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049cc:	f000 fb22 	bl	8005014 <prvIsQueueFull>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	3310      	adds	r3, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ffc4 	bl	800596c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 faad 	bl	8004f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f000 fdf3 	bl	80055d4 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f47f af7c 	bne.w	80048ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <xQueueGenericSend+0x1f8>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	e772      	b.n	80048ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0a:	f000 fa9b 	bl	8004f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a0e:	f000 fde1 	bl	80055d4 <xTaskResumeAll>
 8004a12:	e76c      	b.n	80048ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a16:	f000 fa95 	bl	8004f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a1a:	f000 fddb 	bl	80055d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3738      	adds	r7, #56	; 0x38
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b090      	sub	sp, #64	; 0x40
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <xQueueGenericSendFromISR+0x3c>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <xQueueGenericSendFromISR+0x40>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <xQueueGenericSendFromISR+0x42>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <xQueueGenericSendFromISR+0x6a>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSendFromISR+0x6e>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSendFromISR+0x70>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	623b      	str	r3, [r7, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ab6:	f002 f967 	bl	8006d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aba:	f3ef 8211 	mrs	r2, BASEPRI
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <xQueueGenericSendFromISR+0xbc>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d12f      	bne.n	8004b48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004afe:	f000 f991 	bl	8004e24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d112      	bne.n	8004b32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 ffb3 	bl	8005a84 <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00e      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e007      	b.n	8004b42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b36:	3301      	adds	r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	b25a      	sxtb	r2, r3
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b42:	2301      	movs	r3, #1
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b46:	e001      	b.n	8004b4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3740      	adds	r7, #64	; 0x40
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <xQueueReceive+0x30>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	623b      	str	r3, [r7, #32]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <xQueueReceive+0x3e>
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueReceive+0x42>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueReceive+0x44>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueReceive+0x5e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc2:	f001 f983 	bl	8005ecc <xTaskGetSchedulerState>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <xQueueReceive+0x6e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueReceive+0x72>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueReceive+0x74>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueReceive+0x8e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	61bb      	str	r3, [r7, #24]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf2:	f001 ffe7 	bl	8006bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01f      	beq.n	8004c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c06:	f000 f977 	bl	8004ef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00f      	beq.n	8004c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff30 	bl	8005a84 <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <xQueueReceive+0x1bc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c3a:	f001 fff3 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e069      	b.n	8004d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c48:	f001 ffec 	bl	8006c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e062      	b.n	8004d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c56:	f107 0310 	add.w	r3, r7, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 ffd8 	bl	8005c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c64:	f001 ffde 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c68:	f000 fca6 	bl	80055b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6c:	f001 ffaa 	bl	8006bc4 <vPortEnterCritical>
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d103      	bne.n	8004c86 <xQueueReceive+0x122>
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x138>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	f001 ffc2 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca0:	1d3a      	adds	r2, r7, #4
 8004ca2:	f107 0310 	add.w	r3, r7, #16
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 ffc7 	bl	8005c3c <xTaskCheckForTimeOut>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f000 f997 	bl	8004fe8 <prvIsQueueEmpty>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d017      	beq.n	8004cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	3324      	adds	r3, #36	; 0x24
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fe4f 	bl	800596c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd0:	f000 f938 	bl	8004f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cd4:	f000 fc7e 	bl	80055d4 <xTaskResumeAll>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d189      	bne.n	8004bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xQueueReceive+0x1bc>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e780      	b.n	8004bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	f000 f927 	bl	8004f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf6:	f000 fc6d 	bl	80055d4 <xTaskResumeAll>
 8004cfa:	e77a      	b.n	8004bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f921 	bl	8004f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d02:	f000 fc67 	bl	80055d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d08:	f000 f96e 	bl	8004fe8 <prvIsQueueEmpty>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f43f af6f 	beq.w	8004bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3730      	adds	r7, #48	; 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	623b      	str	r3, [r7, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueReceiveFromISR+0x3a>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <xQueueReceiveFromISR+0x3e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueReceiveFromISR+0x40>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	61fb      	str	r3, [r7, #28]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d7e:	f002 f803 	bl	8006d88 <vPortValidateInterruptPriority>
	__asm volatile
 8004d82:	f3ef 8211 	mrs	r2, BASEPRI
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	61ba      	str	r2, [r7, #24]
 8004d98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02f      	beq.n	8004e0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db8:	f000 f89e 	bl	8004ef8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d112      	bne.n	8004df4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fe52 	bl	8005a84 <xTaskRemoveFromEventList>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e007      	b.n	8004e04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	b25a      	sxtb	r2, r3
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e04:	2301      	movs	r3, #1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
 8004e08:	e001      	b.n	8004e0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f383 8811 	msr	BASEPRI, r3
}
 8004e18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3738      	adds	r7, #56	; 0x38
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d14d      	bne.n	8004ee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f85a 	bl	8005f08 <xTaskPriorityDisinherit>
 8004e54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	e043      	b.n	8004ee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d119      	bne.n	8004e98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6858      	ldr	r0, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	f002 fa38 	bl	80072e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d32b      	bcc.n	8004ee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	e026      	b.n	8004ee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68d8      	ldr	r0, [r3, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	f002 fa1e 	bl	80072e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	425b      	negs	r3, r3
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d207      	bcs.n	8004ed4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	425b      	negs	r3, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d105      	bne.n	8004ee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004eee:	697b      	ldr	r3, [r7, #20]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d018      	beq.n	8004f3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	441a      	add	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d303      	bcc.n	8004f2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68d9      	ldr	r1, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	461a      	mov	r2, r3
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f002 f9d4 	bl	80072e4 <memcpy>
	}
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f4c:	f001 fe3a 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f58:	e011      	b.n	8004f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fd8c 	bl	8005a84 <xTaskRemoveFromEventList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f72:	f000 fec5 	bl	8005d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dce9      	bgt.n	8004f5a <prvUnlockQueue+0x16>
 8004f86:	e000      	b.n	8004f8a <prvUnlockQueue+0x46>
					break;
 8004f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f92:	f001 fe47 	bl	8006c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f96:	f001 fe15 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fa2:	e011      	b.n	8004fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3310      	adds	r3, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fd67 	bl	8005a84 <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fbc:	f000 fea0 	bl	8005d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dce9      	bgt.n	8004fa4 <prvUnlockQueue+0x60>
 8004fd0:	e000      	b.n	8004fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fdc:	f001 fe22 	bl	8006c24 <vPortExitCritical>
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ff0:	f001 fde8 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e001      	b.n	8005006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f001 fe0d 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800501c:	f001 fdd2 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	429a      	cmp	r2, r3
 800502a:	d102      	bne.n	8005032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e001      	b.n	8005036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005036:	f001 fdf5 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e014      	b.n	800507e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005054:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <vQueueAddToRegistry+0x50>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005060:	490c      	ldr	r1, [pc, #48]	; (8005094 <vQueueAddToRegistry+0x50>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <vQueueAddToRegistry+0x50>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005076:	e006      	b.n	8005086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b07      	cmp	r3, #7
 8005082:	d9e7      	bls.n	8005054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	200008dc 	.word	0x200008dc

08005098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050a8:	f001 fd8c 	bl	8006bc4 <vPortEnterCritical>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d103      	bne.n	80050c2 <vQueueWaitForMessageRestricted+0x2a>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d103      	bne.n	80050d8 <vQueueWaitForMessageRestricted+0x40>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d8:	f001 fda4 	bl	8006c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fc9d 	bl	8005a2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff ff26 	bl	8004f44 <prvUnlockQueue>
	}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	; 0x38
 8005104:	af04      	add	r7, sp, #16
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	623b      	str	r3, [r7, #32]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xTaskCreateStatic+0x46>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	61fb      	str	r3, [r7, #28]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005146:	23a8      	movs	r3, #168	; 0xa8
 8005148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2ba8      	cmp	r3, #168	; 0xa8
 800514e:	d00a      	beq.n	8005166 <xTaskCreateStatic+0x66>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	61bb      	str	r3, [r7, #24]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01e      	beq.n	80051ac <xTaskCreateStatic+0xac>
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800517c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	2202      	movs	r2, #2
 8005182:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005186:	2300      	movs	r3, #0
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f850 	bl	8005244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a6:	f000 f8f3 	bl	8005390 <prvAddNewTaskToReadyList>
 80051aa:	e001      	b.n	80051b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051b0:	697b      	ldr	r3, [r7, #20]
	}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3728      	adds	r7, #40	; 0x28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08c      	sub	sp, #48	; 0x30
 80051be:	af04      	add	r7, sp, #16
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fe1a 	bl	8006e08 <pvPortMalloc>
 80051d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051dc:	20a8      	movs	r0, #168	; 0xa8
 80051de:	f001 fe13 	bl	8006e08 <pvPortMalloc>
 80051e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
 80051f0:	e005      	b.n	80051fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051f2:	6978      	ldr	r0, [r7, #20]
 80051f4:	f001 fed4 	bl	8006fa0 <vPortFree>
 80051f8:	e001      	b.n	80051fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	2300      	movs	r3, #0
 8005210:	9303      	str	r3, [sp, #12]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f80e 	bl	8005244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005228:	69f8      	ldr	r0, [r7, #28]
 800522a:	f000 f8b1 	bl	8005390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800522e:	2301      	movs	r3, #1
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e002      	b.n	800523a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800523a:	69bb      	ldr	r3, [r7, #24]
	}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	461a      	mov	r2, r3
 800525c:	21a5      	movs	r1, #165	; 0xa5
 800525e:	f001 ffbd 	bl	80071dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800526c:	3b01      	subs	r3, #1
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	617b      	str	r3, [r7, #20]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01f      	beq.n	80052e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e012      	b.n	80052ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	7819      	ldrb	r1, [r3, #0]
 80052b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	3334      	adds	r3, #52	; 0x34
 80052b8:	460a      	mov	r2, r1
 80052ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d9e9      	bls.n	80052a8 <prvInitialiseNewTask+0x64>
 80052d4:	e000      	b.n	80052d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80052d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e0:	e003      	b.n	80052ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	2b37      	cmp	r3, #55	; 0x37
 80052ee:	d901      	bls.n	80052f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052f0:	2337      	movs	r3, #55	; 0x37
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	2200      	movs	r2, #0
 8005304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	3304      	adds	r3, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff f8be 	bl	800448c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	3318      	adds	r3, #24
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f8b9 	bl	800448c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2200      	movs	r2, #0
 800533c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	3354      	adds	r3, #84	; 0x54
 8005344:	224c      	movs	r2, #76	; 0x4c
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f001 ff47 	bl	80071dc <memset>
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <prvInitialiseNewTask+0x140>)
 8005352:	659a      	str	r2, [r3, #88]	; 0x58
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <prvInitialiseNewTask+0x144>)
 8005358:	65da      	str	r2, [r3, #92]	; 0x5c
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	4a0b      	ldr	r2, [pc, #44]	; (800538c <prvInitialiseNewTask+0x148>)
 800535e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	69b8      	ldr	r0, [r7, #24]
 8005366:	f001 fb01 	bl	800696c <pxPortInitialiseStack>
 800536a:	4602      	mov	r2, r0
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537c:	bf00      	nop
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20004b70 	.word	0x20004b70
 8005388:	20004bd8 	.word	0x20004bd8
 800538c:	20004c40 	.word	0x20004c40

08005390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005398:	f001 fc14 	bl	8006bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800539c:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <prvAddNewTaskToReadyList+0xc4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <prvAddNewTaskToReadyList+0xc4>)
 80053a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ae:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053b4:	4b27      	ldr	r3, [pc, #156]	; (8005454 <prvAddNewTaskToReadyList+0xc4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d110      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053bc:	f000 fcc4 	bl	8005d48 <prvInitialiseTaskLists>
 80053c0:	e00d      	b.n	80053de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <prvAddNewTaskToReadyList+0xcc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d802      	bhi.n	80053de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d8:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <prvAddNewTaskToReadyList+0xd0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <prvAddNewTaskToReadyList+0xd0>)
 80053e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <prvAddNewTaskToReadyList+0xd0>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <prvAddNewTaskToReadyList+0xd4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d903      	bls.n	8005404 <prvAddNewTaskToReadyList+0x74>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <prvAddNewTaskToReadyList+0xd4>)
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <prvAddNewTaskToReadyList+0xd8>)
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f7ff f843 	bl	80044a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005420:	f001 fc00 	bl	8006c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <prvAddNewTaskToReadyList+0xcc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	429a      	cmp	r2, r3
 8005438:	d207      	bcs.n	800544a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvAddNewTaskToReadyList+0xdc>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000df0 	.word	0x20000df0
 8005458:	2000091c 	.word	0x2000091c
 800545c:	20000dfc 	.word	0x20000dfc
 8005460:	20000e0c 	.word	0x20000e0c
 8005464:	20000df8 	.word	0x20000df8
 8005468:	20000920 	.word	0x20000920
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d017      	beq.n	80054b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <vTaskDelay+0x60>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <vTaskDelay+0x30>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60bb      	str	r3, [r7, #8]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054a0:	f000 f88a 	bl	80055b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fdb4 	bl	8006014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054ac:	f000 f892 	bl	80055d4 <xTaskResumeAll>
 80054b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <vTaskDelay+0x64>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000e18 	.word	0x20000e18
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054e6:	463a      	mov	r2, r7
 80054e8:	1d39      	adds	r1, r7, #4
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fd8a 	bl	8004008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	9202      	str	r2, [sp, #8]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	2300      	movs	r3, #0
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	460a      	mov	r2, r1
 8005506:	4924      	ldr	r1, [pc, #144]	; (8005598 <vTaskStartScheduler+0xc0>)
 8005508:	4824      	ldr	r0, [pc, #144]	; (800559c <vTaskStartScheduler+0xc4>)
 800550a:	f7ff fdf9 	bl	8005100 <xTaskCreateStatic>
 800550e:	4603      	mov	r3, r0
 8005510:	4a23      	ldr	r2, [pc, #140]	; (80055a0 <vTaskStartScheduler+0xc8>)
 8005512:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005514:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <vTaskStartScheduler+0xc8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e001      	b.n	8005526 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800552c:	f000 fdc6 	bl	80060bc <xTimerCreateTimerTask>
 8005530:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d11b      	bne.n	8005570 <vTaskStartScheduler+0x98>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	613b      	str	r3, [r7, #16]
}
 800554a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800554c:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <vTaskStartScheduler+0xcc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3354      	adds	r3, #84	; 0x54
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <vTaskStartScheduler+0xd0>)
 8005554:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <vTaskStartScheduler+0xd4>)
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <vTaskStartScheduler+0xd8>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <vTaskStartScheduler+0xdc>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800556a:	f001 fa89 	bl	8006a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800556e:	e00e      	b.n	800558e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d10a      	bne.n	800558e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60fb      	str	r3, [r7, #12]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <vTaskStartScheduler+0xb4>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	08007404 	.word	0x08007404
 800559c:	08005d19 	.word	0x08005d19
 80055a0:	20000e14 	.word	0x20000e14
 80055a4:	2000091c 	.word	0x2000091c
 80055a8:	2000005c 	.word	0x2000005c
 80055ac:	20000e10 	.word	0x20000e10
 80055b0:	20000dfc 	.word	0x20000dfc
 80055b4:	20000df4 	.word	0x20000df4

080055b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <vTaskSuspendAll+0x18>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <vTaskSuspendAll+0x18>)
 80055c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055c6:	bf00      	nop
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000e18 	.word	0x20000e18

080055d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055e2:	4b42      	ldr	r3, [pc, #264]	; (80056ec <xTaskResumeAll+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <xTaskResumeAll+0x2c>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	603b      	str	r3, [r7, #0]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005600:	f001 fae0 	bl	8006bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005604:	4b39      	ldr	r3, [pc, #228]	; (80056ec <xTaskResumeAll+0x118>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3b01      	subs	r3, #1
 800560a:	4a38      	ldr	r2, [pc, #224]	; (80056ec <xTaskResumeAll+0x118>)
 800560c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560e:	4b37      	ldr	r3, [pc, #220]	; (80056ec <xTaskResumeAll+0x118>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d162      	bne.n	80056dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005616:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <xTaskResumeAll+0x11c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d05e      	beq.n	80056dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800561e:	e02f      	b.n	8005680 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005620:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <xTaskResumeAll+0x120>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3318      	adds	r3, #24
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe ff97 	bl	8004560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe ff92 	bl	8004560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <xTaskResumeAll+0x124>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <xTaskResumeAll+0x7c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <xTaskResumeAll+0x124>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a27      	ldr	r2, [pc, #156]	; (80056fc <xTaskResumeAll+0x128>)
 800565e:	441a      	add	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fe ff1d 	bl	80044a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <xTaskResumeAll+0x12c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800567a:	4b22      	ldr	r3, [pc, #136]	; (8005704 <xTaskResumeAll+0x130>)
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <xTaskResumeAll+0x120>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1cb      	bne.n	8005620 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800568e:	f000 fbfd 	bl	8005e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005692:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <xTaskResumeAll+0x134>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800569e:	f000 f847 	bl	8005730 <xTaskIncrementTick>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056a8:	4b16      	ldr	r3, [pc, #88]	; (8005704 <xTaskResumeAll+0x130>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f1      	bne.n	800569e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <xTaskResumeAll+0x134>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056c0:	4b10      	ldr	r3, [pc, #64]	; (8005704 <xTaskResumeAll+0x130>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <xTaskResumeAll+0x138>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056dc:	f001 faa2 	bl	8006c24 <vPortExitCritical>

	return xAlreadyYielded;
 80056e0:	68bb      	ldr	r3, [r7, #8]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000e18 	.word	0x20000e18
 80056f0:	20000df0 	.word	0x20000df0
 80056f4:	20000db0 	.word	0x20000db0
 80056f8:	20000df8 	.word	0x20000df8
 80056fc:	20000920 	.word	0x20000920
 8005700:	2000091c 	.word	0x2000091c
 8005704:	20000e04 	.word	0x20000e04
 8005708:	20000e00 	.word	0x20000e00
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <xTaskGetTickCount+0x1c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800571c:	687b      	ldr	r3, [r7, #4]
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000df4 	.word	0x20000df4

08005730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573a:	4b4f      	ldr	r3, [pc, #316]	; (8005878 <xTaskIncrementTick+0x148>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 808f 	bne.w	8005862 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005744:	4b4d      	ldr	r3, [pc, #308]	; (800587c <xTaskIncrementTick+0x14c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800574c:	4a4b      	ldr	r2, [pc, #300]	; (800587c <xTaskIncrementTick+0x14c>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d120      	bne.n	800579a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005758:	4b49      	ldr	r3, [pc, #292]	; (8005880 <xTaskIncrementTick+0x150>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <xTaskIncrementTick+0x48>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xTaskIncrementTick+0x46>
 8005778:	4b41      	ldr	r3, [pc, #260]	; (8005880 <xTaskIncrementTick+0x150>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b41      	ldr	r3, [pc, #260]	; (8005884 <xTaskIncrementTick+0x154>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <xTaskIncrementTick+0x150>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4a3f      	ldr	r2, [pc, #252]	; (8005884 <xTaskIncrementTick+0x154>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <xTaskIncrementTick+0x158>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	4a3d      	ldr	r2, [pc, #244]	; (8005888 <xTaskIncrementTick+0x158>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f000 fb79 	bl	8005e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579a:	4b3c      	ldr	r3, [pc, #240]	; (800588c <xTaskIncrementTick+0x15c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d349      	bcc.n	8005838 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <xTaskIncrementTick+0x150>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <xTaskIncrementTick+0x15c>)
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	601a      	str	r2, [r3, #0]
					break;
 80057b6:	e03f      	b.n	8005838 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <xTaskIncrementTick+0x150>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d203      	bcs.n	80057d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d0:	4a2e      	ldr	r2, [pc, #184]	; (800588c <xTaskIncrementTick+0x15c>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057d6:	e02f      	b.n	8005838 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe febf 	bl	8004560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	3318      	adds	r3, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe feb6 	bl	8004560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <xTaskIncrementTick+0x160>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d903      	bls.n	8005808 <xTaskIncrementTick+0xd8>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <xTaskIncrementTick+0x160>)
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <xTaskIncrementTick+0x164>)
 8005816:	441a      	add	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f7fe fe41 	bl	80044a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <xTaskIncrementTick+0x168>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	429a      	cmp	r2, r3
 8005830:	d3b8      	bcc.n	80057a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005836:	e7b5      	b.n	80057a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskIncrementTick+0x168>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4915      	ldr	r1, [pc, #84]	; (8005894 <xTaskIncrementTick+0x164>)
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d901      	bls.n	8005854 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <xTaskIncrementTick+0x16c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e004      	b.n	800586c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <xTaskIncrementTick+0x170>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <xTaskIncrementTick+0x170>)
 800586a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000e18 	.word	0x20000e18
 800587c:	20000df4 	.word	0x20000df4
 8005880:	20000da8 	.word	0x20000da8
 8005884:	20000dac 	.word	0x20000dac
 8005888:	20000e08 	.word	0x20000e08
 800588c:	20000e10 	.word	0x20000e10
 8005890:	20000df8 	.word	0x20000df8
 8005894:	20000920 	.word	0x20000920
 8005898:	2000091c 	.word	0x2000091c
 800589c:	20000e04 	.word	0x20000e04
 80058a0:	20000e00 	.word	0x20000e00

080058a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <vTaskSwitchContext+0xb0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b2:	4b29      	ldr	r3, [pc, #164]	; (8005958 <vTaskSwitchContext+0xb4>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b8:	e046      	b.n	8005948 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <vTaskSwitchContext+0xb4>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <vTaskSwitchContext+0xb8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e010      	b.n	80058ea <vTaskSwitchContext+0x46>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vTaskSwitchContext+0x3e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	491d      	ldr	r1, [pc, #116]	; (8005960 <vTaskSwitchContext+0xbc>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0e4      	beq.n	80058c8 <vTaskSwitchContext+0x24>
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <vTaskSwitchContext+0xbc>)
 800590a:	4413      	add	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3308      	adds	r3, #8
 8005920:	429a      	cmp	r2, r3
 8005922:	d104      	bne.n	800592e <vTaskSwitchContext+0x8a>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a0b      	ldr	r2, [pc, #44]	; (8005964 <vTaskSwitchContext+0xc0>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <vTaskSwitchContext+0xb8>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <vTaskSwitchContext+0xc0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3354      	adds	r3, #84	; 0x54
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <vTaskSwitchContext+0xc4>)
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000e18 	.word	0x20000e18
 8005958:	20000e04 	.word	0x20000e04
 800595c:	20000df8 	.word	0x20000df8
 8005960:	20000920 	.word	0x20000920
 8005964:	2000091c 	.word	0x2000091c
 8005968:	2000005c 	.word	0x2000005c

0800596c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60fb      	str	r3, [r7, #12]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <vTaskPlaceOnEventList+0x44>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3318      	adds	r3, #24
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fe fda7 	bl	80044ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a0:	2101      	movs	r1, #1
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f000 fb36 	bl	8006014 <prvAddCurrentTaskToDelayedList>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	2000091c 	.word	0x2000091c

080059b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80059dc:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <vTaskPlaceOnUnorderedEventList+0x70>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	613b      	str	r3, [r7, #16]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <vTaskPlaceOnUnorderedEventList+0x74>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a04:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7fe fd49 	bl	80044a6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a14:	2101      	movs	r1, #1
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fafc 	bl	8006014 <prvAddCurrentTaskToDelayedList>
}
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000e18 	.word	0x20000e18
 8005a28:	2000091c 	.word	0x2000091c

08005a2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617b      	str	r3, [r7, #20]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3318      	adds	r3, #24
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7fe fd22 	bl	80044a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a68:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f000 facf 	bl	8006014 <prvAddCurrentTaskToDelayedList>
	}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	2000091c 	.word	0x2000091c

08005a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60fb      	str	r3, [r7, #12]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fd53 	bl	8004560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aba:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <xTaskRemoveFromEventList+0xb0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11d      	bne.n	8005afe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fd4a 	bl	8004560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <xTaskRemoveFromEventList+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d903      	bls.n	8005ae0 <xTaskRemoveFromEventList+0x5c>
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <xTaskRemoveFromEventList+0xb4>)
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <xTaskRemoveFromEventList+0xb8>)
 8005aee:	441a      	add	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fe fcd5 	bl	80044a6 <vListInsertEnd>
 8005afc:	e005      	b.n	8005b0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3318      	adds	r3, #24
 8005b02:	4619      	mov	r1, r3
 8005b04:	480e      	ldr	r0, [pc, #56]	; (8005b40 <xTaskRemoveFromEventList+0xbc>)
 8005b06:	f7fe fcce 	bl	80044a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <xTaskRemoveFromEventList+0xc0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d905      	bls.n	8005b24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <xTaskRemoveFromEventList+0xc4>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e001      	b.n	8005b28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b28:	697b      	ldr	r3, [r7, #20]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000e18 	.word	0x20000e18
 8005b38:	20000df8 	.word	0x20000df8
 8005b3c:	20000920 	.word	0x20000920
 8005b40:	20000db0 	.word	0x20000db0
 8005b44:	2000091c 	.word	0x2000091c
 8005b48:	20000e04 	.word	0x20000e04

08005b4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	613b      	str	r3, [r7, #16]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fe fcdd 	bl	8004560 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fcd8 	bl	8004560 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d903      	bls.n	8005bc4 <vTaskRemoveFromUnorderedEventList+0x78>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a0f      	ldr	r2, [pc, #60]	; (8005c00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005bd2:	441a      	add	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fc63 	bl	80044a6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d902      	bls.n	8005bf4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005bee:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
	}
}
 8005bf4:	bf00      	nop
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000e18 	.word	0x20000e18
 8005c00:	20000df8 	.word	0x20000df8
 8005c04:	20000920 	.word	0x20000920
 8005c08:	2000091c 	.word	0x2000091c
 8005c0c:	20000e04 	.word	0x20000e04

08005c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <vTaskInternalSetTimeOutState+0x24>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <vTaskInternalSetTimeOutState+0x28>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	605a      	str	r2, [r3, #4]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	20000e08 	.word	0x20000e08
 8005c38:	20000df4 	.word	0x20000df4

08005c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	613b      	str	r3, [r7, #16]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	60fb      	str	r3, [r7, #12]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c7e:	f000 ffa1 	bl	8006bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c82:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <xTaskCheckForTimeOut+0xbc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e023      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <xTaskCheckForTimeOut+0xc0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d007      	beq.n	8005cbe <xTaskCheckForTimeOut+0x82>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	e015      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20b      	bcs.n	8005ce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff9b 	bl	8005c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e004      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cea:	f000 ff9b 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000df4 	.word	0x20000df4
 8005cfc:	20000e08 	.word	0x20000e08

08005d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <vTaskMissedYield+0x14>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000e04 	.word	0x20000e04

08005d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d20:	f000 f852 	bl	8005dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <prvIdleTask+0x28>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d9f9      	bls.n	8005d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <prvIdleTask+0x2c>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d3c:	e7f0      	b.n	8005d20 <prvIdleTask+0x8>
 8005d3e:	bf00      	nop
 8005d40:	20000920 	.word	0x20000920
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	e00c      	b.n	8005d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <prvInitialiseTaskLists+0x60>)
 8005d60:	4413      	add	r3, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fb72 	bl	800444c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b37      	cmp	r3, #55	; 0x37
 8005d72:	d9ef      	bls.n	8005d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d76:	f7fe fb69 	bl	800444c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d7a:	480d      	ldr	r0, [pc, #52]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d7c:	f7fe fb66 	bl	800444c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <prvInitialiseTaskLists+0x6c>)
 8005d82:	f7fe fb63 	bl	800444c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <prvInitialiseTaskLists+0x70>)
 8005d88:	f7fe fb60 	bl	800444c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d8c:	480b      	ldr	r0, [pc, #44]	; (8005dbc <prvInitialiseTaskLists+0x74>)
 8005d8e:	f7fe fb5d 	bl	800444c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <prvInitialiseTaskLists+0x78>)
 8005d94:	4a05      	ldr	r2, [pc, #20]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <prvInitialiseTaskLists+0x7c>)
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	601a      	str	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000920 	.word	0x20000920
 8005dac:	20000d80 	.word	0x20000d80
 8005db0:	20000d94 	.word	0x20000d94
 8005db4:	20000db0 	.word	0x20000db0
 8005db8:	20000dc4 	.word	0x20000dc4
 8005dbc:	20000ddc 	.word	0x20000ddc
 8005dc0:	20000da8 	.word	0x20000da8
 8005dc4:	20000dac 	.word	0x20000dac

08005dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dce:	e019      	b.n	8005e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dd0:	f000 fef8 	bl	8006bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <prvCheckTasksWaitingTermination+0x50>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fbbd 	bl	8004560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a0b      	ldr	r2, [pc, #44]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dfa:	f000 ff13 	bl	8006c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f810 	bl	8005e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e1      	bne.n	8005dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000dc4 	.word	0x20000dc4
 8005e1c:	20000df0 	.word	0x20000df0
 8005e20:	20000dd8 	.word	0x20000dd8

08005e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3354      	adds	r3, #84	; 0x54
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 f9db 	bl	80071ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f8ab 	bl	8006fa0 <vPortFree>
				vPortFree( pxTCB );
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 f8a8 	bl	8006fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e50:	e018      	b.n	8005e84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d103      	bne.n	8005e64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 f89f 	bl	8006fa0 <vPortFree>
	}
 8005e62:	e00f      	b.n	8005e84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d00a      	beq.n	8005e84 <prvDeleteTCB+0x60>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <prvDeleteTCB+0x5e>
	}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e92:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <prvResetNextTaskUnblockTime+0x38>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea4:	e008      	b.n	8005eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <prvResetNextTaskUnblockTime+0x38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb6:	6013      	str	r3, [r2, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20000da8 	.word	0x20000da8
 8005ec8:	20000e10 	.word	0x20000e10

08005ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <xTaskGetSchedulerState+0x34>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eda:	2301      	movs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	e008      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <xTaskGetSchedulerState+0x38>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e001      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ef2:	687b      	ldr	r3, [r7, #4]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000dfc 	.word	0x20000dfc
 8005f04:	20000e18 	.word	0x20000e18

08005f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d056      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <xTaskPriorityDisinherit+0xd0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00a      	beq.n	8005f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d02c      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d128      	bne.n	8005fcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe faee 	bl	8004560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <xTaskPriorityDisinherit+0xa4>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <xTaskPriorityDisinherit+0xd8>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fa6f 	bl	80044a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fcc:	697b      	ldr	r3, [r7, #20]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000091c 	.word	0x2000091c
 8005fdc:	20000df8 	.word	0x20000df8
 8005fe0:	20000920 	.word	0x20000920

08005fe4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <uxTaskResetEventItemValue+0x2c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <uxTaskResetEventItemValue+0x2c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <uxTaskResetEventItemValue+0x2c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006000:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006002:	687b      	ldr	r3, [r7, #4]
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	2000091c 	.word	0x2000091c

08006014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fa98 	bl	8004560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d10a      	bne.n	800604e <prvAddCurrentTaskToDelayedList+0x3a>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4819      	ldr	r0, [pc, #100]	; (80060ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006048:	f7fe fa2d 	bl	80044a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800604c:	e026      	b.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d209      	bcs.n	800607a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f7fe fa3b 	bl	80044ee <vListInsert>
}
 8006078:	e010      	b.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fa31 	bl	80044ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d202      	bcs.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6013      	str	r3, [r2, #0]
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000df4 	.word	0x20000df4
 80060a8:	2000091c 	.word	0x2000091c
 80060ac:	20000ddc 	.word	0x20000ddc
 80060b0:	20000dac 	.word	0x20000dac
 80060b4:	20000da8 	.word	0x20000da8
 80060b8:	20000e10 	.word	0x20000e10

080060bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060c6:	f000 fba1 	bl	800680c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ca:	4b1c      	ldr	r3, [pc, #112]	; (800613c <xTimerCreateTimerTask+0x80>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d021      	beq.n	8006116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060da:	1d3a      	adds	r2, r7, #4
 80060dc:	f107 0108 	add.w	r1, r7, #8
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fd ffa9 	bl	800403c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	2302      	movs	r3, #2
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	460a      	mov	r2, r1
 80060fc:	4910      	ldr	r1, [pc, #64]	; (8006140 <xTimerCreateTimerTask+0x84>)
 80060fe:	4811      	ldr	r0, [pc, #68]	; (8006144 <xTimerCreateTimerTask+0x88>)
 8006100:	f7fe fffe 	bl	8005100 <xTaskCreateStatic>
 8006104:	4603      	mov	r3, r0
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <xTimerCreateTimerTask+0x8c>)
 8006108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800610a:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <xTimerCreateTimerTask+0x8c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006112:	2301      	movs	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000e4c 	.word	0x20000e4c
 8006140:	0800740c 	.word	0x0800740c
 8006144:	080063b5 	.word	0x080063b5
 8006148:	20000e50 	.word	0x20000e50

0800614c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800615a:	202c      	movs	r0, #44	; 0x2c
 800615c:	f000 fe54 	bl	8006e08 <pvPortMalloc>
 8006160:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00d      	beq.n	8006184 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f843 	bl	800620a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006184:	697b      	ldr	r3, [r7, #20]
	}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08a      	sub	sp, #40	; 0x28
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800619c:	232c      	movs	r3, #44	; 0x2c
 800619e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b2c      	cmp	r3, #44	; 0x2c
 80061a4:	d00a      	beq.n	80061bc <xTimerCreateStatic+0x2e>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	61bb      	str	r3, [r7, #24]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xTimerCreateStatic+0x4c>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	617b      	str	r3, [r7, #20]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f805 	bl	800620a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006200:	69fb      	ldr	r3, [r7, #28]
	}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	617b      	str	r3, [r7, #20]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01e      	beq.n	8006278 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800623a:	f000 fae7 	bl	800680c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	3304      	adds	r3, #4
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe f916 	bl	800448c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626c:	f043 0304 	orr.w	r3, r3, #4
 8006270:	b2da      	uxtb	r2, r3
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006278:	bf00      	nop
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	623b      	str	r3, [r7, #32]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062ae:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <xTimerGenericCommand+0x98>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d02a      	beq.n	800630c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	dc18      	bgt.n	80062fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062c8:	f7ff fe00 	bl	8005ecc <xTaskGetSchedulerState>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d109      	bne.n	80062e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <xTimerGenericCommand+0x98>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f107 0110 	add.w	r1, r7, #16
 80062da:	2300      	movs	r3, #0
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	f7fe faa7 	bl	8004830 <xQueueGenericSend>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24
 80062e4:	e012      	b.n	800630c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <xTimerGenericCommand+0x98>)
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	f107 0110 	add.w	r1, r7, #16
 80062ee:	2300      	movs	r3, #0
 80062f0:	2200      	movs	r2, #0
 80062f2:	f7fe fa9d 	bl	8004830 <xQueueGenericSend>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
 80062f8:	e008      	b.n	800630c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <xTimerGenericCommand+0x98>)
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f107 0110 	add.w	r1, r7, #16
 8006302:	2300      	movs	r3, #0
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	f7fe fb91 	bl	8004a2c <xQueueGenericSendFromISR>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800630e:	4618      	mov	r0, r3
 8006310:	3728      	adds	r7, #40	; 0x28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000e4c 	.word	0x20000e4c

0800631c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <prvProcessExpiredTimer+0x94>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe f913 	bl	8004560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d022      	beq.n	800638e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	18d1      	adds	r1, r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f000 f8d1 	bl	80064fc <prvInsertTimerInActiveList>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01f      	beq.n	80063a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f7ff ff88 	bl	8006280 <xTimerGenericCommand>
 8006370:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d113      	bne.n	80063a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	6978      	ldr	r0, [r7, #20]
 80063a6:	4798      	blx	r3
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000e44 	.word	0x20000e44

080063b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063bc:	f107 0308 	add.w	r3, r7, #8
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 f857 	bl	8006474 <prvGetNextExpireTime>
 80063c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4619      	mov	r1, r3
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f803 	bl	80063d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063d2:	f000 f8d5 	bl	8006580 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d6:	e7f1      	b.n	80063bc <prvTimerTask+0x8>

080063d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063e2:	f7ff f8e9 	bl	80055b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063e6:	f107 0308 	add.w	r3, r7, #8
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f866 	bl	80064bc <prvSampleTimeNow>
 80063f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d130      	bne.n	800645a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <prvProcessTimerOrBlockTask+0x3c>
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	429a      	cmp	r2, r3
 8006404:	d806      	bhi.n	8006414 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006406:	f7ff f8e5 	bl	80055d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff85 	bl	800631c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006412:	e024      	b.n	800645e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <prvProcessTimerOrBlockTask+0x90>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <prvProcessTimerOrBlockTask+0x50>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <prvProcessTimerOrBlockTask+0x52>
 8006428:	2300      	movs	r3, #0
 800642a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800642c:	4b0f      	ldr	r3, [pc, #60]	; (800646c <prvProcessTimerOrBlockTask+0x94>)
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	f7fe fe2d 	bl	8005098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800643e:	f7ff f8c9 	bl	80055d4 <xTaskResumeAll>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <prvProcessTimerOrBlockTask+0x98>)
 800644a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	f3bf 8f6f 	isb	sy
}
 8006458:	e001      	b.n	800645e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800645a:	f7ff f8bb 	bl	80055d4 <xTaskResumeAll>
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000e48 	.word	0x20000e48
 800646c:	20000e4c 	.word	0x20000e4c
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <prvGetNextExpireTime+0x44>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <prvGetNextExpireTime+0x16>
 8006486:	2201      	movs	r2, #1
 8006488:	e000      	b.n	800648c <prvGetNextExpireTime+0x18>
 800648a:	2200      	movs	r2, #0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <prvGetNextExpireTime+0x44>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e001      	b.n	80064a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000e44 	.word	0x20000e44

080064bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064c4:	f7ff f924 	bl	8005710 <xTaskGetTickCount>
 80064c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064ca:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <prvSampleTimeNow+0x3c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d205      	bcs.n	80064e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064d4:	f000 f936 	bl	8006744 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064e6:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <prvSampleTimeNow+0x3c>)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064ec:	68fb      	ldr	r3, [r7, #12]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000e54 	.word	0x20000e54

080064fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d812      	bhi.n	8006548 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e01b      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <prvInsertTimerInActiveList+0x7c>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fd ffd4 	bl	80044ee <vListInsert>
 8006546:	e012      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d206      	bcs.n	800655e <prvInsertTimerInActiveList+0x62>
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d302      	bcc.n	800655e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e007      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <prvInsertTimerInActiveList+0x80>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7fd ffc0 	bl	80044ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800656e:	697b      	ldr	r3, [r7, #20]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000e48 	.word	0x20000e48
 800657c:	20000e44 	.word	0x20000e44

08006580 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006586:	e0ca      	b.n	800671e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	da18      	bge.n	80065c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	3304      	adds	r3, #4
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61fb      	str	r3, [r7, #28]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b6:	6850      	ldr	r0, [r2, #4]
 80065b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ba:	6892      	ldr	r2, [r2, #8]
 80065bc:	4611      	mov	r1, r2
 80065be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f2c0 80ab 	blt.w	800671e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	3304      	adds	r3, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd ffc1 	bl	8004560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065de:	463b      	mov	r3, r7
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff ff6b 	bl	80064bc <prvSampleTimeNow>
 80065e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	f200 8096 	bhi.w	800671c <prvProcessReceivedCommands+0x19c>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <prvProcessReceivedCommands+0x78>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006621 	.word	0x08006621
 8006604:	08006695 	.word	0x08006695
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066f3 	.word	0x080066f3
 8006610:	08006621 	.word	0x08006621
 8006614:	08006621 	.word	0x08006621
 8006618:	08006695 	.word	0x08006695
 800661c:	080066a9 	.word	0x080066a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	18d1      	adds	r1, r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006640:	f7ff ff5c 	bl	80064fc <prvInsertTimerInActiveList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d069      	beq.n	800671e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006650:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05e      	beq.n	800671e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	441a      	add	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2100      	movs	r1, #0
 8006670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006672:	f7ff fe05 	bl	8006280 <xTimerGenericCommand>
 8006676:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d14f      	bne.n	800671e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	61bb      	str	r3, [r7, #24]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066a6:	e03a      	b.n	800671e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	617b      	str	r3, [r7, #20]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	18d1      	adds	r1, r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ec:	f7ff ff06 	bl	80064fc <prvInsertTimerInActiveList>
					break;
 80066f0:	e015      	b.n	800671e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f000 fc4d 	bl	8006fa0 <vPortFree>
 8006706:	e00a      	b.n	800671e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800671a:	e000      	b.n	800671e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800671c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <prvProcessReceivedCommands+0x1c0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1d39      	adds	r1, r7, #4
 8006724:	2200      	movs	r2, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fa1c 	bl	8004b64 <xQueueReceive>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f47f af2a 	bne.w	8006588 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3730      	adds	r7, #48	; 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000e4c 	.word	0x20000e4c

08006744 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800674a:	e048      	b.n	80067de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800674c:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <prvSwitchTimerLists+0xc0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006756:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <prvSwitchTimerLists+0xc0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fd fefb 	bl	8004560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02e      	beq.n	80067de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90e      	bls.n	80067b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800679e:	4b19      	ldr	r3, [pc, #100]	; (8006804 <prvSwitchTimerLists+0xc0>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fd fea0 	bl	80044ee <vListInsert>
 80067ae:	e016      	b.n	80067de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b0:	2300      	movs	r3, #0
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	2100      	movs	r1, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff fd60 	bl	8006280 <xTimerGenericCommand>
 80067c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	603b      	str	r3, [r7, #0]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvSwitchTimerLists+0xc0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1b1      	bne.n	800674c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <prvSwitchTimerLists+0xc0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <prvSwitchTimerLists+0xc4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a04      	ldr	r2, [pc, #16]	; (8006804 <prvSwitchTimerLists+0xc0>)
 80067f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067f6:	4a04      	ldr	r2, [pc, #16]	; (8006808 <prvSwitchTimerLists+0xc4>)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000e44 	.word	0x20000e44
 8006808:	20000e48 	.word	0x20000e48

0800680c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006812:	f000 f9d7 	bl	8006bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <prvCheckForValidListAndQueue+0x60>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d120      	bne.n	8006860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800681e:	4814      	ldr	r0, [pc, #80]	; (8006870 <prvCheckForValidListAndQueue+0x64>)
 8006820:	f7fd fe14 	bl	800444c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006824:	4813      	ldr	r0, [pc, #76]	; (8006874 <prvCheckForValidListAndQueue+0x68>)
 8006826:	f7fd fe11 	bl	800444c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <prvCheckForValidListAndQueue+0x6c>)
 800682c:	4a10      	ldr	r2, [pc, #64]	; (8006870 <prvCheckForValidListAndQueue+0x64>)
 800682e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006830:	4b12      	ldr	r3, [pc, #72]	; (800687c <prvCheckForValidListAndQueue+0x70>)
 8006832:	4a10      	ldr	r2, [pc, #64]	; (8006874 <prvCheckForValidListAndQueue+0x68>)
 8006834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006836:	2300      	movs	r3, #0
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	4b11      	ldr	r3, [pc, #68]	; (8006880 <prvCheckForValidListAndQueue+0x74>)
 800683c:	4a11      	ldr	r2, [pc, #68]	; (8006884 <prvCheckForValidListAndQueue+0x78>)
 800683e:	2110      	movs	r1, #16
 8006840:	200a      	movs	r0, #10
 8006842:	f7fd ff1f 	bl	8004684 <xQueueGenericCreateStatic>
 8006846:	4603      	mov	r3, r0
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <prvCheckForValidListAndQueue+0x60>)
 800684a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <prvCheckForValidListAndQueue+0x60>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <prvCheckForValidListAndQueue+0x60>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	490b      	ldr	r1, [pc, #44]	; (8006888 <prvCheckForValidListAndQueue+0x7c>)
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fbf2 	bl	8005044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006860:	f000 f9e0 	bl	8006c24 <vPortExitCritical>
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000e4c 	.word	0x20000e4c
 8006870:	20000e1c 	.word	0x20000e1c
 8006874:	20000e30 	.word	0x20000e30
 8006878:	20000e44 	.word	0x20000e44
 800687c:	20000e48 	.word	0x20000e48
 8006880:	20000ef8 	.word	0x20000ef8
 8006884:	20000e58 	.word	0x20000e58
 8006888:	08007414 	.word	0x08007414

0800688c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80068b4:	f000 f986 	bl	8006bc4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80068be:	f000 f9b1 	bl	8006c24 <vPortExitCritical>

	return pvReturn;
 80068c2:	693b      	ldr	r3, [r7, #16]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80068da:	f06f 0301 	mvn.w	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <xTimerPendFunctionCallFromISR+0x3c>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f107 0114 	add.w	r1, r7, #20
 80068f4:	2300      	movs	r3, #0
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	f7fe f898 	bl	8004a2c <xQueueGenericSendFromISR>
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	; 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000e4c 	.word	0x20000e4c

0800690c <xTimerPendFunctionCall>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		/* This function can only be called after a timer has been created or
		after the scheduler has been started because, until then, the timer
		queue does not exist. */
		configASSERT( xTimerQueue );
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <xTimerPendFunctionCall+0x5c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <xTimerPendFunctionCall+0x2c>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	623b      	str	r3, [r7, #32]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <xTimerPendFunctionCall+0x2a>

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	613b      	str	r3, [r7, #16]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	61fb      	str	r3, [r7, #28]

		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <xTimerPendFunctionCall+0x5c>)
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f107 0110 	add.w	r1, r7, #16
 8006952:	2300      	movs	r3, #0
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	f7fd ff6b 	bl	8004830 <xQueueGenericSend>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3728      	adds	r7, #40	; 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000e4c 	.word	0x20000e4c

0800696c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b04      	subs	r3, #4
 800697c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b04      	subs	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b04      	subs	r3, #4
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800699c:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <pxPortInitialiseStack+0x64>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3b14      	subs	r3, #20
 80069a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f06f 0202 	mvn.w	r2, #2
 80069ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3b20      	subs	r3, #32
 80069c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	080069d5 	.word	0x080069d5

080069d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvTaskExitError+0x54>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d00a      	beq.n	80069fe <prvTaskExitError+0x2a>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60fb      	str	r3, [r7, #12]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <prvTaskExitError+0x28>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a12:	bf00      	nop
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0fc      	beq.n	8006a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	00000000 	.word	0x00000000

08006a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <pxCurrentTCBConst2>)
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	f380 8809 	msr	PSP, r0
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	4770      	bx	lr
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst2>:
 8006a50:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a58:	4808      	ldr	r0, [pc, #32]	; (8006a7c <prvPortStartFirstTask+0x24>)
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	6800      	ldr	r0, [r0, #0]
 8006a5e:	f380 8808 	msr	MSP, r0
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8814 	msr	CONTROL, r0
 8006a6a:	b662      	cpsie	i
 8006a6c:	b661      	cpsie	f
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	df00      	svc	0
 8006a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed08 	.word	0xe000ed08

08006a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a86:	4b46      	ldr	r3, [pc, #280]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a46      	ldr	r2, [pc, #280]	; (8006ba4 <xPortStartScheduler+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10a      	bne.n	8006aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <xPortStartScheduler+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10a      	bne.n	8006ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <xPortStartScheduler+0x12c>)
 8006ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <xPortStartScheduler+0x130>)
 8006aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aee:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006af4:	e009      	b.n	8006b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006af6:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	4a2d      	ldr	r2, [pc, #180]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d0ef      	beq.n	8006af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b16:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1c3 0307 	rsb	r3, r3, #7
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d00a      	beq.n	8006b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60bb      	str	r3, [r7, #8]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b6e:	f000 f8dd 	bl	8006d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <xPortStartScheduler+0x13c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b78:	f000 f8fc 	bl	8006d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b88:	f7ff ff66 	bl	8006a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b8c:	f7fe fe8a 	bl	80058a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b90:	f7ff ff20 	bl	80069d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed00 	.word	0xe000ed00
 8006ba4:	410fc271 	.word	0x410fc271
 8006ba8:	410fc270 	.word	0x410fc270
 8006bac:	e000e400 	.word	0xe000e400
 8006bb0:	20000f48 	.word	0x20000f48
 8006bb4:	20000f4c 	.word	0x20000f4c
 8006bb8:	e000ed20 	.word	0xe000ed20
 8006bbc:	2000000c 	.word	0x2000000c
 8006bc0:	e000ef34 	.word	0xe000ef34

08006bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	607b      	str	r3, [r7, #4]
}
 8006bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bde:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <vPortEnterCritical+0x58>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10f      	bne.n	8006c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <vPortEnterCritical+0x5c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	603b      	str	r3, [r7, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vPortEnterCritical+0x4a>
	}
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <vPortExitCritical+0x50>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <vPortExitCritical+0x24>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <vPortExitCritical+0x50>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <vPortExitCritical+0x50>)
 8006c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <vPortExitCritical+0x42>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f383 8811 	msr	BASEPRI, r3
}
 8006c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c
	...

08006c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c80:	f3ef 8009 	mrs	r0, PSP
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <pxCurrentTCBConst>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f01e 0f10 	tst.w	lr, #16
 8006c90:	bf08      	it	eq
 8006c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	6010      	str	r0, [r2, #0]
 8006c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ca4:	f380 8811 	msr	BASEPRI, r0
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f7fe fdf8 	bl	80058a4 <vTaskSwitchContext>
 8006cb4:	f04f 0000 	mov.w	r0, #0
 8006cb8:	f380 8811 	msr	BASEPRI, r0
 8006cbc:	bc09      	pop	{r0, r3}
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	6808      	ldr	r0, [r1, #0]
 8006cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc6:	f01e 0f10 	tst.w	lr, #16
 8006cca:	bf08      	it	eq
 8006ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cd0:	f380 8809 	msr	PSP, r0
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d02:	f7fe fd15 	bl	8005730 <xTaskIncrementTick>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <xPortSysTickHandler+0x40>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <vPortSetupTimerInterrupt+0x38>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <vPortSetupTimerInterrupt+0x3c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <vPortSetupTimerInterrupt+0x40>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <vPortSetupTimerInterrupt+0x44>)
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d50:	2207      	movs	r2, #7
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000e010 	.word	0xe000e010
 8006d64:	e000e018 	.word	0xe000e018
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	10624dd3 	.word	0x10624dd3
 8006d70:	e000e014 	.word	0xe000e014

08006d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d84 <vPortEnableVFP+0x10>
 8006d78:	6801      	ldr	r1, [r0, #0]
 8006d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d7e:	6001      	str	r1, [r0, #0]
 8006d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d82:	bf00      	nop
 8006d84:	e000ed88 	.word	0xe000ed88

08006d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d8e:	f3ef 8305 	mrs	r3, IPSR
 8006d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d914      	bls.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <vPortValidateInterruptPriority+0x70>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <vPortValidateInterruptPriority+0x74>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	7afa      	ldrb	r2, [r7, #11]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d20a      	bcs.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <vPortValidateInterruptPriority+0x7c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d90a      	bls.n	8006dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	603b      	str	r3, [r7, #0]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <vPortValidateInterruptPriority+0x60>
	}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000e3f0 	.word	0xe000e3f0
 8006dfc:	20000f48 	.word	0x20000f48
 8006e00:	e000ed0c 	.word	0xe000ed0c
 8006e04:	20000f4c 	.word	0x20000f4c

08006e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e14:	f7fe fbd0 	bl	80055b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e18:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <pvPortMalloc+0x180>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e20:	f000 f920 	bl	8007064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <pvPortMalloc+0x184>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 8093 	bne.w	8006f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01d      	beq.n	8006e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e38:	2208      	movs	r2, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f023 0307 	bic.w	r3, r3, #7
 8006e50:	3308      	adds	r3, #8
 8006e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <pvPortMalloc+0x6c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	617b      	str	r3, [r7, #20]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d06e      	beq.n	8006f58 <pvPortMalloc+0x150>
 8006e7a:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <pvPortMalloc+0x188>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d869      	bhi.n	8006f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e84:	4b43      	ldr	r3, [pc, #268]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e88:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8e:	e004      	b.n	8006e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <pvPortMalloc+0xa4>
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f1      	bne.n	8006e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <pvPortMalloc+0x180>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d050      	beq.n	8006f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d91f      	bls.n	8006f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <pvPortMalloc+0xf8>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	613b      	str	r3, [r7, #16]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f12:	69b8      	ldr	r0, [r7, #24]
 8006f14:	f000 f908 	bl	8007128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <pvPortMalloc+0x188>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <pvPortMalloc+0x188>)
 8006f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <pvPortMalloc+0x188>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <pvPortMalloc+0x190>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d203      	bcs.n	8006f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <pvPortMalloc+0x188>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <pvPortMalloc+0x190>)
 8006f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x184>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x194>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a11      	ldr	r2, [pc, #68]	; (8006f9c <pvPortMalloc+0x194>)
 8006f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f58:	f7fe fb3c 	bl	80055d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <pvPortMalloc+0x174>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvPortMalloc+0x172>
	return pvReturn;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20004b58 	.word	0x20004b58
 8006f8c:	20004b6c 	.word	0x20004b6c
 8006f90:	20004b5c 	.word	0x20004b5c
 8006f94:	20004b50 	.word	0x20004b50
 8006f98:	20004b60 	.word	0x20004b60
 8006f9c:	20004b64 	.word	0x20004b64

08006fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04d      	beq.n	800704e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <vPortFree+0xb8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <vPortFree+0x44>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <vPortFree+0x62>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <vPortFree+0xb8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01e      	beq.n	800704e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11a      	bne.n	800704e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <vPortFree+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007028:	f7fe fac6 	bl	80055b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <vPortFree+0xbc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4413      	add	r3, r2
 8007036:	4a09      	ldr	r2, [pc, #36]	; (800705c <vPortFree+0xbc>)
 8007038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f000 f874 	bl	8007128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <vPortFree+0xc0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a06      	ldr	r2, [pc, #24]	; (8007060 <vPortFree+0xc0>)
 8007048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800704a:	f7fe fac3 	bl	80055d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800704e:	bf00      	nop
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20004b6c 	.word	0x20004b6c
 800705c:	20004b5c 	.word	0x20004b5c
 8007060:	20004b68 	.word	0x20004b68

08007064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800706a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800706e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <prvHeapInit+0xac>)
 8007072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <prvHeapInit+0xac>)
 8007094:	4413      	add	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800709c:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <prvHeapInit+0xb0>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <prvHeapInit+0xb0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070b0:	2208      	movs	r2, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <prvHeapInit+0xb4>)
 80070c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <prvHeapInit+0xb4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <prvHeapInit+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvHeapInit+0xb4>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a0a      	ldr	r2, [pc, #40]	; (800711c <prvHeapInit+0xb8>)
 80070f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a09      	ldr	r2, [pc, #36]	; (8007120 <prvHeapInit+0xbc>)
 80070fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <prvHeapInit+0xc0>)
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007102:	601a      	str	r2, [r3, #0]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000f50 	.word	0x20000f50
 8007114:	20004b50 	.word	0x20004b50
 8007118:	20004b58 	.word	0x20004b58
 800711c:	20004b60 	.word	0x20004b60
 8007120:	20004b5c 	.word	0x20004b5c
 8007124:	20004b6c 	.word	0x20004b6c

08007128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <prvInsertBlockIntoFreeList+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e002      	b.n	800713c <prvInsertBlockIntoFreeList+0x14>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d8f7      	bhi.n	8007136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d108      	bne.n	800716a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d118      	bne.n	80071b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d00d      	beq.n	80071a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e008      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e003      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d002      	beq.n	80071c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20004b50 	.word	0x20004b50
 80071d8:	20004b58 	.word	0x20004b58

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_reclaim_reent>:
 80071ec:	4b29      	ldr	r3, [pc, #164]	; (8007294 <_reclaim_reent+0xa8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4283      	cmp	r3, r0
 80071f2:	b570      	push	{r4, r5, r6, lr}
 80071f4:	4604      	mov	r4, r0
 80071f6:	d04b      	beq.n	8007290 <_reclaim_reent+0xa4>
 80071f8:	69c3      	ldr	r3, [r0, #28]
 80071fa:	b143      	cbz	r3, 800720e <_reclaim_reent+0x22>
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d144      	bne.n	800728c <_reclaim_reent+0xa0>
 8007202:	69e3      	ldr	r3, [r4, #28]
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	b111      	cbz	r1, 800720e <_reclaim_reent+0x22>
 8007208:	4620      	mov	r0, r4
 800720a:	f000 f879 	bl	8007300 <_free_r>
 800720e:	6961      	ldr	r1, [r4, #20]
 8007210:	b111      	cbz	r1, 8007218 <_reclaim_reent+0x2c>
 8007212:	4620      	mov	r0, r4
 8007214:	f000 f874 	bl	8007300 <_free_r>
 8007218:	69e1      	ldr	r1, [r4, #28]
 800721a:	b111      	cbz	r1, 8007222 <_reclaim_reent+0x36>
 800721c:	4620      	mov	r0, r4
 800721e:	f000 f86f 	bl	8007300 <_free_r>
 8007222:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007224:	b111      	cbz	r1, 800722c <_reclaim_reent+0x40>
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f86a 	bl	8007300 <_free_r>
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	b111      	cbz	r1, 8007236 <_reclaim_reent+0x4a>
 8007230:	4620      	mov	r0, r4
 8007232:	f000 f865 	bl	8007300 <_free_r>
 8007236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007238:	b111      	cbz	r1, 8007240 <_reclaim_reent+0x54>
 800723a:	4620      	mov	r0, r4
 800723c:	f000 f860 	bl	8007300 <_free_r>
 8007240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007242:	b111      	cbz	r1, 800724a <_reclaim_reent+0x5e>
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f85b 	bl	8007300 <_free_r>
 800724a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800724c:	b111      	cbz	r1, 8007254 <_reclaim_reent+0x68>
 800724e:	4620      	mov	r0, r4
 8007250:	f000 f856 	bl	8007300 <_free_r>
 8007254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007256:	b111      	cbz	r1, 800725e <_reclaim_reent+0x72>
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f851 	bl	8007300 <_free_r>
 800725e:	6a23      	ldr	r3, [r4, #32]
 8007260:	b1b3      	cbz	r3, 8007290 <_reclaim_reent+0xa4>
 8007262:	4620      	mov	r0, r4
 8007264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007268:	4718      	bx	r3
 800726a:	5949      	ldr	r1, [r1, r5]
 800726c:	b941      	cbnz	r1, 8007280 <_reclaim_reent+0x94>
 800726e:	3504      	adds	r5, #4
 8007270:	69e3      	ldr	r3, [r4, #28]
 8007272:	2d80      	cmp	r5, #128	; 0x80
 8007274:	68d9      	ldr	r1, [r3, #12]
 8007276:	d1f8      	bne.n	800726a <_reclaim_reent+0x7e>
 8007278:	4620      	mov	r0, r4
 800727a:	f000 f841 	bl	8007300 <_free_r>
 800727e:	e7c0      	b.n	8007202 <_reclaim_reent+0x16>
 8007280:	680e      	ldr	r6, [r1, #0]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f83c 	bl	8007300 <_free_r>
 8007288:	4631      	mov	r1, r6
 800728a:	e7ef      	b.n	800726c <_reclaim_reent+0x80>
 800728c:	2500      	movs	r5, #0
 800728e:	e7ef      	b.n	8007270 <_reclaim_reent+0x84>
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	bf00      	nop
 8007294:	2000005c 	.word	0x2000005c

08007298 <__libc_init_array>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4d0d      	ldr	r5, [pc, #52]	; (80072d0 <__libc_init_array+0x38>)
 800729c:	4c0d      	ldr	r4, [pc, #52]	; (80072d4 <__libc_init_array+0x3c>)
 800729e:	1b64      	subs	r4, r4, r5
 80072a0:	10a4      	asrs	r4, r4, #2
 80072a2:	2600      	movs	r6, #0
 80072a4:	42a6      	cmp	r6, r4
 80072a6:	d109      	bne.n	80072bc <__libc_init_array+0x24>
 80072a8:	4d0b      	ldr	r5, [pc, #44]	; (80072d8 <__libc_init_array+0x40>)
 80072aa:	4c0c      	ldr	r4, [pc, #48]	; (80072dc <__libc_init_array+0x44>)
 80072ac:	f000 f880 	bl	80073b0 <_init>
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	2600      	movs	r6, #0
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	d105      	bne.n	80072c6 <__libc_init_array+0x2e>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c0:	4798      	blx	r3
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7ee      	b.n	80072a4 <__libc_init_array+0xc>
 80072c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ca:	4798      	blx	r3
 80072cc:	3601      	adds	r6, #1
 80072ce:	e7f2      	b.n	80072b6 <__libc_init_array+0x1e>
 80072d0:	080074b4 	.word	0x080074b4
 80072d4:	080074b4 	.word	0x080074b4
 80072d8:	080074b4 	.word	0x080074b4
 80072dc:	080074b8 	.word	0x080074b8

080072e0 <__retarget_lock_acquire_recursive>:
 80072e0:	4770      	bx	lr

080072e2 <__retarget_lock_release_recursive>:
 80072e2:	4770      	bx	lr

080072e4 <memcpy>:
 80072e4:	440a      	add	r2, r1
 80072e6:	4291      	cmp	r1, r2
 80072e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ec:	d100      	bne.n	80072f0 <memcpy+0xc>
 80072ee:	4770      	bx	lr
 80072f0:	b510      	push	{r4, lr}
 80072f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fa:	4291      	cmp	r1, r2
 80072fc:	d1f9      	bne.n	80072f2 <memcpy+0xe>
 80072fe:	bd10      	pop	{r4, pc}

08007300 <_free_r>:
 8007300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007302:	2900      	cmp	r1, #0
 8007304:	d044      	beq.n	8007390 <_free_r+0x90>
 8007306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730a:	9001      	str	r0, [sp, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f1a1 0404 	sub.w	r4, r1, #4
 8007312:	bfb8      	it	lt
 8007314:	18e4      	addlt	r4, r4, r3
 8007316:	f000 f83f 	bl	8007398 <__malloc_lock>
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <_free_r+0x94>)
 800731c:	9801      	ldr	r0, [sp, #4]
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	b933      	cbnz	r3, 8007330 <_free_r+0x30>
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	6014      	str	r4, [r2, #0]
 8007326:	b003      	add	sp, #12
 8007328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800732c:	f000 b83a 	b.w	80073a4 <__malloc_unlock>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d908      	bls.n	8007346 <_free_r+0x46>
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	1961      	adds	r1, r4, r5
 8007338:	428b      	cmp	r3, r1
 800733a:	bf01      	itttt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	1949      	addeq	r1, r1, r5
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	e7ed      	b.n	8007322 <_free_r+0x22>
 8007346:	461a      	mov	r2, r3
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b10b      	cbz	r3, 8007350 <_free_r+0x50>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d9fa      	bls.n	8007346 <_free_r+0x46>
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	1855      	adds	r5, r2, r1
 8007354:	42a5      	cmp	r5, r4
 8007356:	d10b      	bne.n	8007370 <_free_r+0x70>
 8007358:	6824      	ldr	r4, [r4, #0]
 800735a:	4421      	add	r1, r4
 800735c:	1854      	adds	r4, r2, r1
 800735e:	42a3      	cmp	r3, r4
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	d1e0      	bne.n	8007326 <_free_r+0x26>
 8007364:	681c      	ldr	r4, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	6053      	str	r3, [r2, #4]
 800736a:	440c      	add	r4, r1
 800736c:	6014      	str	r4, [r2, #0]
 800736e:	e7da      	b.n	8007326 <_free_r+0x26>
 8007370:	d902      	bls.n	8007378 <_free_r+0x78>
 8007372:	230c      	movs	r3, #12
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	e7d6      	b.n	8007326 <_free_r+0x26>
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	1961      	adds	r1, r4, r5
 800737c:	428b      	cmp	r3, r1
 800737e:	bf04      	itt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	bf04      	itt	eq
 8007388:	1949      	addeq	r1, r1, r5
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	6054      	str	r4, [r2, #4]
 800738e:	e7ca      	b.n	8007326 <_free_r+0x26>
 8007390:	b003      	add	sp, #12
 8007392:	bd30      	pop	{r4, r5, pc}
 8007394:	20004cac 	.word	0x20004cac

08007398 <__malloc_lock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_lock+0x8>)
 800739a:	f7ff bfa1 	b.w	80072e0 <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20004ca8 	.word	0x20004ca8

080073a4 <__malloc_unlock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__malloc_unlock+0x8>)
 80073a6:	f7ff bf9c 	b.w	80072e2 <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20004ca8 	.word	0x20004ca8

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
